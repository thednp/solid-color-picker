{"version":3,"file":"index.js","sources":["../src/util/nonColors.ts","../src/util/roundPart.ts","../src/util/webColors.ts","../src/util/matchers.ts","../src/util/isNonColor.ts","../src/util/isColorType.ts","../src/util/isOnePointZero.ts","../src/util/isPercentage.ts","../src/util/isValidCSSUnit.ts","../src/util/colorFormat.ts","../src/util/isColorName.ts","../src/util/bound01.ts","../src/util/boundAlpha.ts","../src/util/clamp01.ts","../src/util/pad2.ts","../src/util/getRGBFromName.ts","../src/convert/parseIntFromHex.ts","../src/convert/convertHexToDecimal.ts","../src/convert/convertDecimalToHex.ts","../src/convert/rgbToHsl.ts","../src/convert/hueToRgb.ts","../src/convert/hslToRgb.ts","../src/convert/rgbToHwb.ts","../src/convert/hwbToRgb.ts","../src/convert/rgbToHsv.ts","../src/convert/hsvToRgb.ts","../src/convert/rgbToHex.ts","../src/convert/rgbaToHex.ts","../src/util/stringInputToObject.ts","../src/util/inputToRgb.ts","../src/index.ts"],"sourcesContent":["/**\n * A list of explicit default non-color values.\n */\nconst nonColors = ['transparent', 'currentColor', 'inherit', 'revert', 'initial'];\nexport default nonColors;\n","/**\n * Round colour components, for all formats except HEX.\n */\nconst roundPart = (v: number): number => {\n  const floor = Math.floor(v);\n  return v - floor < 0.5 ? floor : Math.round(v);\n};\n\nexport default roundPart;\n","import type { RGB } from '../interface/rgb';\n\n/**\n * 148 Web Colors\n * <https://en.wikipedia.org/wiki/Web_colors>\n */\nconst webColors: [string, RGB][] = [\n  [\n    'aliceblue',\n    {\n      r: 240,\n      g: 248,\n      b: 255,\n    },\n  ],\n  [\n    'antiquewhite',\n    {\n      r: 250,\n      g: 235,\n      b: 215,\n    },\n  ],\n  [\n    'aqua',\n    {\n      r: 0,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    'aquamarine',\n    {\n      r: 127,\n      g: 255,\n      b: 212,\n    },\n  ],\n  [\n    'azure',\n    {\n      r: 240,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    'beige',\n    {\n      r: 245,\n      g: 245,\n      b: 220,\n    },\n  ],\n  [\n    'bisque',\n    {\n      r: 255,\n      g: 228,\n      b: 196,\n    },\n  ],\n  [\n    'black',\n    {\n      r: 0,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    'blanchedalmond',\n    {\n      r: 255,\n      g: 235,\n      b: 205,\n    },\n  ],\n  [\n    'blue',\n    {\n      r: 0,\n      g: 0,\n      b: 255,\n    },\n  ],\n  [\n    'blueviolet',\n    {\n      r: 138,\n      g: 43,\n      b: 226,\n    },\n  ],\n  [\n    'brown',\n    {\n      r: 165,\n      g: 42,\n      b: 42,\n    },\n  ],\n  [\n    'burlywood',\n    {\n      r: 222,\n      g: 184,\n      b: 135,\n    },\n  ],\n  [\n    'cadetblue',\n    {\n      r: 95,\n      g: 158,\n      b: 160,\n    },\n  ],\n  [\n    'chartreuse',\n    {\n      r: 127,\n      g: 255,\n      b: 0,\n    },\n  ],\n  [\n    'chocolate',\n    {\n      r: 210,\n      g: 105,\n      b: 30,\n    },\n  ],\n  [\n    'coral',\n    {\n      r: 255,\n      g: 127,\n      b: 80,\n    },\n  ],\n  [\n    'cornflowerblue',\n    {\n      r: 100,\n      g: 149,\n      b: 237,\n    },\n  ],\n  [\n    'cornsilk',\n    {\n      r: 255,\n      g: 248,\n      b: 220,\n    },\n  ],\n  [\n    'crimson',\n    {\n      r: 220,\n      g: 20,\n      b: 60,\n    },\n  ],\n  [\n    'cyan',\n    {\n      r: 0,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    'darkblue',\n    {\n      r: 0,\n      g: 0,\n      b: 139,\n    },\n  ],\n  [\n    'darkcyan',\n    {\n      r: 0,\n      g: 139,\n      b: 139,\n    },\n  ],\n  [\n    'darkgoldenrod',\n    {\n      r: 184,\n      g: 134,\n      b: 11,\n    },\n  ],\n  [\n    'darkgray',\n    {\n      r: 169,\n      g: 169,\n      b: 169,\n    },\n  ],\n  [\n    'darkgreen',\n    {\n      r: 0,\n      g: 100,\n      b: 0,\n    },\n  ],\n  [\n    'darkgrey',\n    {\n      r: 169,\n      g: 169,\n      b: 169,\n    },\n  ],\n  [\n    'darkkhaki',\n    {\n      r: 189,\n      g: 183,\n      b: 107,\n    },\n  ],\n  [\n    'darkmagenta',\n    {\n      r: 139,\n      g: 0,\n      b: 139,\n    },\n  ],\n  [\n    'darkolivegreen',\n    {\n      r: 85,\n      g: 107,\n      b: 47,\n    },\n  ],\n  [\n    'darkorange',\n    {\n      r: 255,\n      g: 140,\n      b: 0,\n    },\n  ],\n  [\n    'darkorchid',\n    {\n      r: 153,\n      g: 50,\n      b: 204,\n    },\n  ],\n  [\n    'darkred',\n    {\n      r: 139,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    'darksalmon',\n    {\n      r: 233,\n      g: 150,\n      b: 122,\n    },\n  ],\n  [\n    'darkseagreen',\n    {\n      r: 143,\n      g: 188,\n      b: 143,\n    },\n  ],\n  [\n    'darkslateblue',\n    {\n      r: 72,\n      g: 61,\n      b: 139,\n    },\n  ],\n  [\n    'darkslategray',\n    {\n      r: 47,\n      g: 79,\n      b: 79,\n    },\n  ],\n  [\n    'darkslategrey',\n    {\n      r: 47,\n      g: 79,\n      b: 79,\n    },\n  ],\n  [\n    'darkturquoise',\n    {\n      r: 0,\n      g: 206,\n      b: 209,\n    },\n  ],\n  [\n    'darkviolet',\n    {\n      r: 148,\n      g: 0,\n      b: 211,\n    },\n  ],\n  [\n    'deeppink',\n    {\n      r: 255,\n      g: 20,\n      b: 147,\n    },\n  ],\n  [\n    'deepskyblue',\n    {\n      r: 0,\n      g: 191,\n      b: 255,\n    },\n  ],\n  [\n    'dimgray',\n    {\n      r: 105,\n      g: 105,\n      b: 105,\n    },\n  ],\n  [\n    'dimgrey',\n    {\n      r: 105,\n      g: 105,\n      b: 105,\n    },\n  ],\n  [\n    'dodgerblue',\n    {\n      r: 30,\n      g: 144,\n      b: 255,\n    },\n  ],\n  [\n    'firebrick',\n    {\n      r: 178,\n      g: 34,\n      b: 34,\n    },\n  ],\n  [\n    'floralwhite',\n    {\n      r: 255,\n      g: 250,\n      b: 240,\n    },\n  ],\n  [\n    'forestgreen',\n    {\n      r: 34,\n      g: 139,\n      b: 34,\n    },\n  ],\n  [\n    'fuchsia',\n    {\n      r: 255,\n      g: 0,\n      b: 255,\n    },\n  ],\n  [\n    'gainsboro',\n    {\n      r: 220,\n      g: 220,\n      b: 220,\n    },\n  ],\n  [\n    'ghostwhite',\n    {\n      r: 248,\n      g: 248,\n      b: 255,\n    },\n  ],\n  [\n    'goldenrod',\n    {\n      r: 218,\n      g: 165,\n      b: 32,\n    },\n  ],\n  [\n    'gold',\n    {\n      r: 255,\n      g: 215,\n      b: 0,\n    },\n  ],\n  [\n    'gray',\n    {\n      r: 128,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    'green',\n    {\n      r: 0,\n      g: 128,\n      b: 0,\n    },\n  ],\n  [\n    'greenyellow',\n    {\n      r: 173,\n      g: 255,\n      b: 47,\n    },\n  ],\n  [\n    'grey',\n    {\n      r: 128,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    'honeydew',\n    {\n      r: 240,\n      g: 255,\n      b: 240,\n    },\n  ],\n  [\n    'hotpink',\n    {\n      r: 255,\n      g: 105,\n      b: 180,\n    },\n  ],\n  [\n    'indianred',\n    {\n      r: 205,\n      g: 92,\n      b: 92,\n    },\n  ],\n  [\n    'indigo',\n    {\n      r: 75,\n      g: 0,\n      b: 130,\n    },\n  ],\n  [\n    'ivory',\n    {\n      r: 255,\n      g: 255,\n      b: 240,\n    },\n  ],\n  [\n    'khaki',\n    {\n      r: 240,\n      g: 230,\n      b: 140,\n    },\n  ],\n  [\n    'lavenderblush',\n    {\n      r: 255,\n      g: 240,\n      b: 245,\n    },\n  ],\n  [\n    'lavender',\n    {\n      r: 230,\n      g: 230,\n      b: 250,\n    },\n  ],\n  [\n    'lawngreen',\n    {\n      r: 124,\n      g: 252,\n      b: 0,\n    },\n  ],\n  [\n    'lemonchiffon',\n    {\n      r: 255,\n      g: 250,\n      b: 205,\n    },\n  ],\n  [\n    'lightblue',\n    {\n      r: 173,\n      g: 216,\n      b: 230,\n    },\n  ],\n  [\n    'lightcoral',\n    {\n      r: 240,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    'lightcyan',\n    {\n      r: 224,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    'lightgoldenrodyellow',\n    {\n      r: 250,\n      g: 250,\n      b: 210,\n    },\n  ],\n  [\n    'lightgray',\n    {\n      r: 211,\n      g: 211,\n      b: 211,\n    },\n  ],\n  [\n    'lightgreen',\n    {\n      r: 144,\n      g: 238,\n      b: 144,\n    },\n  ],\n  [\n    'lightgrey',\n    {\n      r: 211,\n      g: 211,\n      b: 211,\n    },\n  ],\n  [\n    'lightpink',\n    {\n      r: 255,\n      g: 182,\n      b: 193,\n    },\n  ],\n  [\n    'lightsalmon',\n    {\n      r: 255,\n      g: 160,\n      b: 122,\n    },\n  ],\n  [\n    'lightseagreen',\n    {\n      r: 32,\n      g: 178,\n      b: 170,\n    },\n  ],\n  [\n    'lightskyblue',\n    {\n      r: 135,\n      g: 206,\n      b: 250,\n    },\n  ],\n  [\n    'lightslategray',\n    {\n      r: 119,\n      g: 136,\n      b: 153,\n    },\n  ],\n  [\n    'lightslategrey',\n    {\n      r: 119,\n      g: 136,\n      b: 153,\n    },\n  ],\n  [\n    'lightsteelblue',\n    {\n      r: 176,\n      g: 196,\n      b: 222,\n    },\n  ],\n  [\n    'lightyellow',\n    {\n      r: 255,\n      g: 255,\n      b: 224,\n    },\n  ],\n  [\n    'lime',\n    {\n      r: 0,\n      g: 255,\n      b: 0,\n    },\n  ],\n  [\n    'limegreen',\n    {\n      r: 50,\n      g: 205,\n      b: 50,\n    },\n  ],\n  [\n    'linen',\n    {\n      r: 250,\n      g: 240,\n      b: 230,\n    },\n  ],\n  [\n    'magenta',\n    {\n      r: 255,\n      g: 0,\n      b: 255,\n    },\n  ],\n  [\n    'maroon',\n    {\n      r: 128,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    'mediumaquamarine',\n    {\n      r: 102,\n      g: 205,\n      b: 170,\n    },\n  ],\n  [\n    'mediumblue',\n    {\n      r: 0,\n      g: 0,\n      b: 205,\n    },\n  ],\n  [\n    'mediumorchid',\n    {\n      r: 186,\n      g: 85,\n      b: 211,\n    },\n  ],\n  [\n    'mediumpurple',\n    {\n      r: 147,\n      g: 112,\n      b: 219,\n    },\n  ],\n  [\n    'mediumseagreen',\n    {\n      r: 60,\n      g: 179,\n      b: 113,\n    },\n  ],\n  [\n    'mediumslateblue',\n    {\n      r: 123,\n      g: 104,\n      b: 238,\n    },\n  ],\n  [\n    'mediumspringgreen',\n    {\n      r: 0,\n      g: 250,\n      b: 154,\n    },\n  ],\n  [\n    'mediumturquoise',\n    {\n      r: 72,\n      g: 209,\n      b: 204,\n    },\n  ],\n  [\n    'mediumvioletred',\n    {\n      r: 199,\n      g: 21,\n      b: 133,\n    },\n  ],\n  [\n    'midnightblue',\n    {\n      r: 25,\n      g: 25,\n      b: 112,\n    },\n  ],\n  [\n    'mintcream',\n    {\n      r: 245,\n      g: 255,\n      b: 250,\n    },\n  ],\n  [\n    'mistyrose',\n    {\n      r: 255,\n      g: 228,\n      b: 225,\n    },\n  ],\n  [\n    'moccasin',\n    {\n      r: 255,\n      g: 228,\n      b: 181,\n    },\n  ],\n  [\n    'navajowhite',\n    {\n      r: 255,\n      g: 222,\n      b: 173,\n    },\n  ],\n  [\n    'navy',\n    {\n      r: 0,\n      g: 0,\n      b: 128,\n    },\n  ],\n  [\n    'oldlace',\n    {\n      r: 253,\n      g: 245,\n      b: 230,\n    },\n  ],\n  [\n    'olive',\n    {\n      r: 128,\n      g: 128,\n      b: 0,\n    },\n  ],\n  [\n    'olivedrab',\n    {\n      r: 107,\n      g: 142,\n      b: 35,\n    },\n  ],\n  [\n    'orange',\n    {\n      r: 255,\n      g: 165,\n      b: 0,\n    },\n  ],\n  [\n    'orangered',\n    {\n      r: 255,\n      g: 69,\n      b: 0,\n    },\n  ],\n  [\n    'orchid',\n    {\n      r: 218,\n      g: 112,\n      b: 214,\n    },\n  ],\n  [\n    'palegoldenrod',\n    {\n      r: 238,\n      g: 232,\n      b: 170,\n    },\n  ],\n  [\n    'palegreen',\n    {\n      r: 152,\n      g: 251,\n      b: 152,\n    },\n  ],\n  [\n    'paleturquoise',\n    {\n      r: 175,\n      g: 238,\n      b: 238,\n    },\n  ],\n  [\n    'palevioletred',\n    {\n      r: 219,\n      g: 112,\n      b: 147,\n    },\n  ],\n  [\n    'papayawhip',\n    {\n      r: 255,\n      g: 239,\n      b: 213,\n    },\n  ],\n  [\n    'peachpuff',\n    {\n      r: 255,\n      g: 218,\n      b: 185,\n    },\n  ],\n  [\n    'peru',\n    {\n      r: 205,\n      g: 133,\n      b: 63,\n    },\n  ],\n  [\n    'pink',\n    {\n      r: 255,\n      g: 192,\n      b: 203,\n    },\n  ],\n  [\n    'plum',\n    {\n      r: 221,\n      g: 160,\n      b: 221,\n    },\n  ],\n  [\n    'powderblue',\n    {\n      r: 176,\n      g: 224,\n      b: 230,\n    },\n  ],\n  [\n    'purple',\n    {\n      r: 128,\n      g: 0,\n      b: 128,\n    },\n  ],\n  [\n    'rebeccapurple',\n    {\n      r: 102,\n      g: 51,\n      b: 153,\n    },\n  ],\n  [\n    'red',\n    {\n      r: 255,\n      g: 0,\n      b: 0,\n    },\n  ],\n  [\n    'rosybrown',\n    {\n      r: 188,\n      g: 143,\n      b: 143,\n    },\n  ],\n  [\n    'royalblue',\n    {\n      r: 65,\n      g: 105,\n      b: 225,\n    },\n  ],\n  [\n    'saddlebrown',\n    {\n      r: 139,\n      g: 69,\n      b: 19,\n    },\n  ],\n  [\n    'salmon',\n    {\n      r: 250,\n      g: 128,\n      b: 114,\n    },\n  ],\n  [\n    'sandybrown',\n    {\n      r: 244,\n      g: 164,\n      b: 96,\n    },\n  ],\n  [\n    'seagreen',\n    {\n      r: 46,\n      g: 139,\n      b: 87,\n    },\n  ],\n  [\n    'seashell',\n    {\n      r: 255,\n      g: 245,\n      b: 238,\n    },\n  ],\n  [\n    'sienna',\n    {\n      r: 160,\n      g: 82,\n      b: 45,\n    },\n  ],\n  [\n    'silver',\n    {\n      r: 192,\n      g: 192,\n      b: 192,\n    },\n  ],\n  [\n    'skyblue',\n    {\n      r: 135,\n      g: 206,\n      b: 235,\n    },\n  ],\n  [\n    'slateblue',\n    {\n      r: 106,\n      g: 90,\n      b: 205,\n    },\n  ],\n  [\n    'slategray',\n    {\n      r: 112,\n      g: 128,\n      b: 144,\n    },\n  ],\n  [\n    'slategrey',\n    {\n      r: 112,\n      g: 128,\n      b: 144,\n    },\n  ],\n  [\n    'snow',\n    {\n      r: 255,\n      g: 250,\n      b: 250,\n    },\n  ],\n  [\n    'springgreen',\n    {\n      r: 0,\n      g: 255,\n      b: 127,\n    },\n  ],\n  [\n    'steelblue',\n    {\n      r: 70,\n      g: 130,\n      b: 180,\n    },\n  ],\n  [\n    'tan',\n    {\n      r: 210,\n      g: 180,\n      b: 140,\n    },\n  ],\n  [\n    'teal',\n    {\n      r: 0,\n      g: 128,\n      b: 128,\n    },\n  ],\n  [\n    'thistle',\n    {\n      r: 216,\n      g: 191,\n      b: 216,\n    },\n  ],\n  [\n    'tomato',\n    {\n      r: 255,\n      g: 99,\n      b: 71,\n    },\n  ],\n  [\n    'turquoise',\n    {\n      r: 64,\n      g: 224,\n      b: 208,\n    },\n  ],\n  [\n    'violet',\n    {\n      r: 238,\n      g: 130,\n      b: 238,\n    },\n  ],\n  [\n    'wheat',\n    {\n      r: 245,\n      g: 222,\n      b: 179,\n    },\n  ],\n  [\n    'white',\n    {\n      r: 255,\n      g: 255,\n      b: 255,\n    },\n  ],\n  [\n    'whitesmoke',\n    {\n      r: 245,\n      g: 245,\n      b: 245,\n    },\n  ],\n  [\n    'yellow',\n    {\n      r: 255,\n      g: 255,\n      b: 0,\n    },\n  ],\n  [\n    'yellowgreen',\n    {\n      r: 154,\n      g: 205,\n      b: 50,\n    },\n  ],\n];\n\nexport default webColors;\n","// Hue angles\nconst ANGLES = 'deg|rad|grad|turn';\n\n// <http://www.w3.org/TR/css3-values/#integers>\nconst CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n\n// Include CSS3 Module\n// <http://www.w3.org/TR/css3-values/#number-value>\nconst CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n\n// Include CSS4 Module Hue degrees unit\n// <https://www.w3.org/TR/css3-values/#angle-value>\nconst CSS_ANGLE = `[-\\\\+]?\\\\d*\\\\.?\\\\d+(?:${ANGLES})?`;\n\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nconst CSS_UNIT = `(?:${CSS_NUMBER})|(?:${CSS_INTEGER})`;\n\n// Add angles to the mix\nconst CSS_UNIT2 = `(?:${CSS_UNIT})|(?:${CSS_ANGLE}?)`;\n\n// Start & end\nconst START_MATCH = '(?:[\\\\s|\\\\(\\\\s|\\\\s\\\\(\\\\s]+)?';\nconst END_MATCH = '(?:[\\\\s|\\\\)\\\\s]+)?';\n// Components separation\nconst SEP = '(?:[,|\\\\s]+)';\nconst SEP2 = '(?:[,|\\\\/\\\\s]*)?';\n\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nconst PERMISSIVE_MATCH = `${START_MATCH}(${CSS_UNIT2})${SEP}(${CSS_UNIT})${SEP}(${CSS_UNIT})${SEP2}(${CSS_UNIT})?${END_MATCH}`;\n\nconst matchers = {\n  CSS_UNIT: new RegExp(CSS_UNIT2),\n  ANGLES,\n  CSS_ANGLE,\n  CSS_INTEGER,\n  CSS_NUMBER,\n  CSS_UNIT2,\n  PERMISSIVE_MATCH,\n  hwb: new RegExp(`hwb${PERMISSIVE_MATCH}`),\n  rgb: new RegExp(`rgb(?:a)?${PERMISSIVE_MATCH}`),\n  hsl: new RegExp(`hsl(?:a)?${PERMISSIVE_MATCH}`),\n  hsv: new RegExp(`hsv(?:a)?${PERMISSIVE_MATCH}`),\n  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n\nexport default matchers;\n","import nonColors from './nonColors';\n\n/**\n * Check if a text is a valid CSS non-color value.\n */\nconst isNonColor = <T extends string>(str: T): boolean => {\n  return (nonColors as T[]).includes(str);\n};\n\nexport default isNonColor;\n","/**\n * Check if a value is an instance of an RGB(a)/HSL(a)/HSV(a)/HWB(a) instance.\n */\nconst isColorType = <T extends object>( // RGBALike | HSLALike | HSVALike | HWBALike\n  obj: unknown,\n  inst: T,\n): obj is T => {\n  return obj !== null && typeof obj === 'object' && Object.keys(inst).every(c => c in obj);\n};\n\nexport default isColorType;\n","/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n */\nconst isOnePointZero = (n: string | number): boolean => {\n  return `${n}`.includes('.') && parseFloat(n as string) === 1;\n};\n\nexport default isOnePointZero;\n","/**\n * Check to see if string passed in is a percentage\n */\nconst isPercentage = (n: string | number): boolean => {\n  return typeof n === 'string' && n.includes('%');\n};\n\nexport default isPercentage;\n","import matchers from './matchers';\n\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nconst isValidCSSUnit = (comp: string | number): boolean => {\n  return Boolean(matchers.CSS_UNIT.exec(`${comp}`));\n};\n\nexport default isValidCSSUnit;\n","// Color supported formats\nconst COLOR_FORMAT = ['rgb', 'hex', 'hsl', 'hsv', 'hwb'];\n\nexport default COLOR_FORMAT;\n","import nonColors from './nonColors';\nimport COLOR_FORMAT from './colorFormat';\nimport webColors from './webColors';\n\ntype NonColor = 'transparent' | 'currentColor' | 'inherit' | 'revert' | 'initial';\n\n/**\n * Check to see if string passed is a web safe colour.\n *\n * @see https://stackoverflow.com/a/16994164\n */\nconst isColorName = (color: string): color is NonColor => {\n  if (nonColors.includes(color) || ['#', ...COLOR_FORMAT].some(f => color.includes(f))) {\n    return false;\n  }\n\n  return webColors.some(([c]) => color === c);\n};\n\nexport default isColorName;\n","import isOnePointZero from './isOnePointZero';\nimport isPercentage from './isPercentage';\n/**\n * Take input from [0, n] and return it as [0, 1]\n */\nconst bound01 = (N: string | number, max: number): number => {\n  let n = N;\n\n  if (\n    typeof N === 'number' &&\n    Math.min(N, 0) === 0 && // round values to 6 decimals Math.round(N * (10 ** 6)) / 10 ** 6\n    Math.max(N, 1) === 1\n  )\n    return N;\n\n  if (isOnePointZero(N)) n = '100%';\n\n  const processPercent = isPercentage(n);\n  n = max === 360 ? parseFloat(n as string) : Math.min(max, Math.max(0, parseFloat(n as string)));\n\n  // Automatically convert percentage into number\n  if (processPercent) n = (n * max) / 100;\n\n  // Handle floating point rounding errors\n  if (Math.abs(n - max) < 0.000001) {\n    return 1;\n  }\n  // Convert into [0, 1] range if it isn't already\n  if (max === 360) {\n    // If n is a hue given in degrees,\n    // wrap around out-of-range values into [0, 360] range\n    // then convert into [0, 1].\n    n = (n < 0 ? (n % max) + max : n % max) / max;\n  } else {\n    // If n not a hue given in degrees\n    // Convert into [0, 1] range if it isn't already.\n    n = (n % max) / max;\n  }\n  return n;\n};\n\nexport default bound01;\n","/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1.\n */\nconst boundAlpha = (a: string | number): number => {\n  let na = parseFloat(a as string);\n\n  if (Number.isNaN(na) || na < 0 || na > 1) {\n    na = 1;\n  }\n\n  return na;\n};\n\nexport default boundAlpha;\n","/**\n * Force a number between 0 and 1.\n */\nconst clamp01 = (v: number): number => {\n  return Math.min(1, Math.max(0, v));\n};\n\nexport default clamp01;\n","/**\n * Force a hexadecimal value to have 2 characters.\n */\nconst pad2 = (c: string): string => {\n  return c.length === 1 ? `0${c}` : String(c);\n};\n\nexport default pad2;\n","import webColors from './webColors';\n\nimport type { RGB } from '../interface/rgb';\n\n/**\n * Returns the RGB value of a web safe colour.\n */\nconst getRGBFromName = (name: string): RGB => {\n  const [[, rgbValue]] = webColors.filter(([k]) => k === name.toLowerCase());\n\n  return rgbValue;\n};\n\nexport default getRGBFromName;\n","/**\n * Converts a base-16 hexadecimal value into a base-10 integer.\n */\nconst parseIntFromHex = (val: string): number => {\n  return parseInt(val, 16);\n};\n\nexport default parseIntFromHex;\n","import parseIntFromHex from './parseIntFromHex';\n\n/**\n * Converts a hexadecimal value to decimal.\n */\nconst convertHexToDecimal = (h: string): number => {\n  return parseIntFromHex(h) / 255;\n};\nexport default convertHexToDecimal;\n","import roundPart from '../util/roundPart';\n\n/**\n * Converts a decimal value to hexadecimal.\n */\nconst convertDecimalToHex = (d: number): string => {\n  return roundPart(d * 255).toString(16);\n};\n\nexport default convertDecimalToHex;\n","import type { HSL } from '../interface/hsl';\n\n/**\n * Converts an RGB colour value to HSL.\n */\nconst rgbToHsl = (r: number, g: number, b: number): HSL => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s = 0;\n  const l = (max + min) / 2;\n  if (max === min) {\n    s = 0;\n    h = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    if (max === r) h = (g - b) / d + (g < b ? 6 : 0);\n    if (max === g) h = (b - r) / d + 2;\n    if (max === b) h = (r - g) / d + 4;\n\n    h /= 6;\n  }\n  return { h, s, l };\n};\n\nexport default rgbToHsl;\n","/**\n * Returns a normalized RGB component value.\n */\nconst hueToRgb = (p: number, q: number, t: number): number => {\n  let T = t;\n  if (T < 0) T += 1;\n  if (T > 1) T -= 1;\n  if (T < 1 / 6) return p + (q - p) * (6 * T);\n  if (T < 1 / 2) return q;\n  if (T < 2 / 3) return p + (q - p) * (2 / 3 - T) * 6;\n  return p;\n};\nexport default hueToRgb;\n","import hueToRgb from './hueToRgb';\nimport type { RGB } from '../interface/rgb';\n\n/**\n * Converts an HSL colour value to RGB.\n */\nconst hslToRgb = (h: number, s: number, l: number): RGB => {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (s === 0) {\n    // achromatic\n    g = l;\n    b = l;\n    r = l;\n  } else if (l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hueToRgb(p, q, h + 1 / 3);\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - 1 / 3);\n  }\n\n  return { r, g, b };\n};\n\nexport default hslToRgb;\n","import { HWB } from '../interface/hwb';\n\n/**\n * Returns an HWB colour object from an RGB colour object.\n *\n * @link https://www.w3.org/TR/css-color-4/#hwb-to-rgb\n * @link http://alvyray.com/Papers/CG/hwb2rgb.htm\n */\nconst rgbToHwb = (r: number, g: number, b: number): HWB => {\n  let f = 0;\n  let i = 0;\n  const whiteness = Math.min(r, g, b);\n  const max = Math.max(r, g, b);\n  const black = 1 - max;\n\n  if (max === whiteness) return { h: 0, w: whiteness, b: black };\n  if (r === whiteness) {\n    f = g - b;\n    i = 3;\n  } else {\n    f = g === whiteness ? b - r : r - g;\n    i = g === whiteness ? 5 : 1;\n  }\n\n  const h = (i - f / (max - whiteness)) / 6;\n  return {\n    h: h === 1 ? 0 : h,\n    w: whiteness,\n    b: black,\n  };\n};\n\nexport default rgbToHwb;\n","import hslToRgb from './hslToRgb';\nimport type { RGB } from '../interface/rgb';\n\n/**\n * Returns an RGB colour object from an HWB colour.\n *\n * @link https://www.w3.org/TR/css-color-4/#hwb-to-rgb\n * @link http://alvyray.com/Papers/CG/hwb2rgb.htm\n */\nconst hwbToRgb = (H: number, W: number, B: number): RGB => {\n  if (W + B >= 1) {\n    const gray = W / (W + B);\n    return { r: gray, g: gray, b: gray };\n  }\n  let { r, g, b } = hslToRgb(H, 1, 0.5);\n  [r, g, b] = [r, g, b].map(v => v * (1 - W - B) + W);\n\n  return { r, g, b };\n};\n\nexport default hwbToRgb;\n","import type { HSV } from '../interface/hsv';\n\n/**\n * Converts an RGB colour value to HSV.\n */\nconst rgbToHsv = (r: number, g: number, b: number): HSV => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  const v = max;\n  const d = max - min;\n  const s = max === 0 ? 0 : d / max;\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    if (r === max) h = (g - b) / d + (g < b ? 6 : 0);\n    if (g === max) h = (b - r) / d + 2;\n    if (b === max) h = (r - g) / d + 4;\n\n    h /= 6;\n  }\n  return { h, s, v };\n};\n\nexport default rgbToHsv;\n","import { RGB } from '../interface/rgb';\n\n/**\n * Converts an HSV colour value to RGB.\n */\nconst hsvToRgb = (H: number, S: number, V: number): RGB => {\n  const h = H * 6;\n  const s = S;\n  const v = V;\n  const i = Math.floor(h);\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n  return { r, g, b };\n};\n\nexport default hsvToRgb;\n","import pad2 from '../util/pad2';\nimport roundPart from '../util/roundPart';\n\n/**\n * Converts an RGB colour to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nconst rgbToHex = (r: number, g: number, b: number, allow3Char?: boolean): string => {\n  const hex = [\n    pad2(roundPart(r).toString(16)),\n    pad2(roundPart(g).toString(16)),\n    pad2(roundPart(b).toString(16)),\n  ];\n\n  // Return a 3 character hex if possible\n  if (\n    allow3Char &&\n    hex[0].charAt(0) === hex[0].charAt(1) &&\n    hex[1].charAt(0) === hex[1].charAt(1) &&\n    hex[2].charAt(0) === hex[2].charAt(1)\n  ) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n\n  return hex.join('');\n};\n\nexport default rgbToHex;\n","import pad2 from '../util/pad2';\nimport roundPart from '../util/roundPart';\nimport convertDecimalToHex from './convertDecimalToHex';\n\n/**\n * Converts an RGBA color plus alpha transparency to hex8.\n */\nconst rgbaToHex = (r: number, g: number, b: number, a: number, allow4Char?: boolean): string => {\n  const hex = [\n    pad2(roundPart(r).toString(16)),\n    pad2(roundPart(g).toString(16)),\n    pad2(roundPart(b).toString(16)),\n    pad2(convertDecimalToHex(a)),\n  ];\n\n  // Return a 4 character hex if possible\n  if (\n    allow4Char &&\n    hex[0].charAt(0) === hex[0].charAt(1) &&\n    hex[1].charAt(0) === hex[1].charAt(1) &&\n    hex[2].charAt(0) === hex[2].charAt(1) &&\n    hex[3].charAt(0) === hex[3].charAt(1)\n  ) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n  }\n  return hex.join('');\n};\n\nexport default rgbaToHex;\n","import isColorName from './isColorName';\nimport isNonColor from './isNonColor';\nimport getRGBFromName from './getRGBFromName';\nimport matchers from './matchers';\nimport parseIntFromHex from '../convert/parseIntFromHex';\nimport convertHexToDecimal from '../convert/convertHexToDecimal';\n\nimport type { RGBALike } from '../interface/rgbaLike';\nimport type { HSLALike } from '../interface/hslaLike';\nimport type { HWBALike } from '../interface/hwbaLike';\nimport type { HSVALike } from '../interface/hsvaLike';\n\n/**\n * Permissive string parsing. Take in a number of formats, and output an object\n * based on detected format. Returns {r,g,b} or {h,s,l} or {h,s,v}\n */\nconst stringInputToObject = (input?: string): RGBALike | HSLALike | HSVALike | HWBALike => {\n  const color: string = String(input).trim().toLowerCase();\n\n  if (isColorName(color)) {\n    return Object.assign(getRGBFromName(color), {\n      a: 1,\n      format: 'rgb',\n      ok: true,\n    });\n  }\n  if (isNonColor(color)) {\n    const a = color === 'transparent' ? 0 : 1;\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a,\n      format: 'rgb',\n      ok: true,\n    };\n  }\n\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function,\n  //   don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether Color is initialized with string or object.\n  let [, m1, m2, m3, m4] = matchers.rgb.exec(color) || [];\n  if (m1 && m2 && m3 /* && m4 */) {\n    return {\n      r: m1,\n      g: m2,\n      b: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: 'rgb',\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hsl.exec(color) || [];\n  if (m1 && m2 && m3 /* && m4 */) {\n    return {\n      h: m1,\n      s: m2,\n      l: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: 'hsl',\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hsv.exec(color) || [];\n  if (m1 && m2 && m3 /* && m4 */) {\n    return {\n      h: m1,\n      s: m2,\n      v: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: 'hsv',\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hwb.exec(color) || [];\n  if (m1 && m2 && m3) {\n    return {\n      h: m1,\n      w: m2,\n      b: m3,\n      a: m4 !== undefined ? m4 : 1,\n      format: 'hwb',\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hex8.exec(color) || [];\n  if (m1 && m2 && m3 && m4) {\n    return {\n      r: parseIntFromHex(m1),\n      g: parseIntFromHex(m2),\n      b: parseIntFromHex(m3),\n      a: convertHexToDecimal(m4),\n      format: 'hex',\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3] = matchers.hex6.exec(color) || [];\n  if (m1 && m2 && m3) {\n    return {\n      r: parseIntFromHex(m1),\n      g: parseIntFromHex(m2),\n      b: parseIntFromHex(m3),\n      a: 1,\n      format: 'hex',\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3, m4] = matchers.hex4.exec(color) || [];\n  if (m1 && m2 && m3 && m4) {\n    return {\n      r: parseIntFromHex(m1 + m1),\n      g: parseIntFromHex(m2 + m2),\n      b: parseIntFromHex(m3 + m3),\n      a: convertHexToDecimal(m4 + m4),\n      format: 'hex',\n      ok: true,\n    };\n  }\n\n  [, m1, m2, m3] = matchers.hex3.exec(color) || [];\n  if (m1 && m2 && m3) {\n    return {\n      r: parseIntFromHex(m1 + m1),\n      g: parseIntFromHex(m2 + m2),\n      b: parseIntFromHex(m3 + m3),\n      a: 1,\n      format: 'hex',\n      ok: true,\n    };\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n    format: 'rgb',\n    ok: !input ? true : false,\n  };\n};\n\nexport default stringInputToObject;\n","import ColorInputTypes from './colorInputTypes';\nimport stringInputToObject from './stringInputToObject';\nimport isColorType from './isColorType';\nimport isValidCSSUnit from './isValidCSSUnit';\nimport isPercentage from './isPercentage';\nimport bound01 from './bound01';\nimport boundAlpha from './boundAlpha';\nimport hsvToRgb from '../convert/hsvToRgb';\nimport hslToRgb from '../convert/hslToRgb';\nimport hwbToRgb from '../convert/hwbToRgb';\n\nimport type { RGBAObject } from '../interface/rgbaObject';\nimport type { RGB } from '../interface/rgb';\n\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\" // CSS4 Module\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba(255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba(1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"rgb(255 0 0 / 10%)\" or \"rgb 255 0 0 0.1\" // CSS4 Module\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsl(0deg 100% 50% / 50%)\" or \"hsl 0 100 50 50\" // CSS4 Module\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * \"hsva(0, 100%, 100%, 0.1)\" or \"hsva 0 100% 100% 0.1\"\n * \"hsv(0deg 100% 100% / 10%)\" or \"hsv 0 100 100 0.1\" // CSS4 Module\n * \"hwb(0deg, 100%, 100%, 100%)\" or \"hwb 0 100% 100% 0.1\" // CSS4 Module\n * ```\n */\nconst inputToRGB = (input?: ColorInputTypes): RGBAObject => {\n  let rgb = { r: 0, g: 0, b: 0 };\n  let color = input;\n  let a = 1;\n  let s: number;\n  let v: number;\n  let l: number;\n  let w: number;\n  let b: number;\n  let h: number;\n  let r: number;\n  let g: number;\n  let format = 'rgb';\n  let ok = false;\n\n  if (!color || typeof color === 'string') {\n    color = stringInputToObject(color as string);\n    ok = (color as RGBAObject).ok;\n  }\n\n  if (\n    isColorType(color, rgb) &&\n    isValidCSSUnit(color.r) &&\n    isValidCSSUnit(color.g) &&\n    isValidCSSUnit(color.b)\n  ) {\n    ({ r, g, b } = color as RGB);\n    // RGB values now are all in [0, 1] range\n    [r, g, b] = [r, g, b].map(n => bound01(n, isPercentage(n) ? 100 : 255));\n    rgb = { r, g, b };\n    format = 'format' in color ? (color as RGBAObject).format : 'rgb';\n  }\n  if (\n    isColorType(color, { h: 0, s: 0, v: 0 }) &&\n    isValidCSSUnit(color.h) &&\n    isValidCSSUnit(color.s) &&\n    isValidCSSUnit(color.v)\n  ) {\n    ({ h, s, v } = color);\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\n    s = bound01(s, 100); // saturation can be `5%` or a [0, 1] value\n    v = bound01(v, 100); // brightness can be `5%` or a [0, 1] value\n    rgb = hsvToRgb(h, s, v);\n    format = 'hsv';\n  }\n  if (\n    isColorType(color, { h: 0, s: 0, l: 0 }) &&\n    isValidCSSUnit(color.h) &&\n    isValidCSSUnit(color.s) &&\n    isValidCSSUnit(color.l)\n  ) {\n    ({ h, s, l } = color);\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\n    s = bound01(s, 100); // saturation can be `5%` or a [0, 1] value\n    l = bound01(l, 100); // lightness can be `5%` or a [0, 1] value\n    rgb = hslToRgb(h, s, l);\n    format = 'hsl';\n  }\n  if (\n    isColorType(color, { h: 0, w: 0, b: 0 }) &&\n    isValidCSSUnit(color.h) &&\n    isValidCSSUnit(color.w) &&\n    isValidCSSUnit(color.b)\n  ) {\n    ({ h, w, b } = color);\n    h = bound01(h, 360); // hue can be `5deg` or a [0, 1] value\n    w = bound01(w, 100); // whiteness can be `5%` or a [0, 1] value\n    b = bound01(b, 100); // blackness can be `5%` or a [0, 1] value\n    rgb = hwbToRgb(h, w, b);\n    format = 'hwb';\n  }\n\n  if (isValidCSSUnit((color as RGBAObject).a)) {\n    a = (color as RGBAObject).a;\n    a = isPercentage(a) || parseFloat(`${a}`) > 1 ? bound01(a, 100) : a;\n  }\n\n  return {\n    r: rgb.r,\n    g: rgb.g,\n    b: rgb.b,\n    a: boundAlpha(a),\n    format,\n    ok,\n  };\n};\n\nexport default inputToRGB;\n","import nonColors from './util/nonColors';\nimport roundPart from './util/roundPart';\nimport webColors from './util/webColors';\nimport matchers from './util/matchers';\nimport isNonColor from './util/isNonColor';\nimport isColorType from './util/isColorType';\nimport isOnePointZero from './util/isOnePointZero';\nimport isPercentage from './util/isPercentage';\nimport isValidCSSUnit from './util/isValidCSSUnit';\nimport isColorName from './util/isColorName';\nimport bound01 from './util/bound01';\nimport boundAlpha from './util/boundAlpha';\nimport clamp01 from './util/clamp01';\nimport pad2 from './util/pad2';\nimport COLOR_FORMAT from './util/colorFormat';\nimport getRGBFromName from './util/getRGBFromName';\nimport convertHexToDecimal from './convert/convertHexToDecimal';\nimport convertDecimalToHex from './convert/convertDecimalToHex';\nimport parseIntFromHex from './convert/parseIntFromHex';\nimport ColorFormats from './util/colorFormats';\nimport ColorInputTypes from './util/colorInputTypes';\nimport rgbToHsl from './convert/rgbToHsl';\nimport hueToRgb from './convert/hueToRgb';\nimport hslToRgb from './convert/hslToRgb';\nimport rgbToHwb from './convert/rgbToHwb';\nimport hwbToRgb from './convert/hwbToRgb';\nimport rgbToHsv from './convert/rgbToHsv';\nimport hsvToRgb from './convert/hsvToRgb';\nimport rgbToHex from './convert/rgbToHex';\nimport rgbaToHex from './convert/rgbaToHex';\nimport stringInputToObject from './util/stringInputToObject';\nimport inputToRGB from './util/inputToRgb';\n\nimport type { RGBA } from './interface/rgba';\nimport type { HSLA } from './interface/hsla';\nimport type { HSVA } from './interface/hsva';\nimport type { HWBA } from './interface/hwba';\n\nimport { version } from '../package.json';\n\n/**\n * Returns a new `Color` instance.\n *\n * @see https://github.com/bgrins/TinyColor\n */\nexport default class Color {\n  // bring main utilities to front\n  public static matchers = matchers;\n  public static isOnePointZero = isOnePointZero;\n  public static isPercentage = isPercentage;\n  public static isValidCSSUnit = isValidCSSUnit;\n  public static isNonColor = isNonColor;\n  public static isColorName = isColorName;\n  public static isColorType = isColorType;\n  public static pad2 = pad2;\n  public static clamp01 = clamp01;\n  public static bound01 = bound01;\n  public static boundAlpha = boundAlpha;\n  public static getRGBFromName = getRGBFromName;\n  public static convertHexToDecimal = convertHexToDecimal;\n  public static convertDecimalToHex = convertDecimalToHex;\n  public static rgbToHsl = rgbToHsl;\n  public static rgbToHex = rgbToHex;\n  public static rgbToHsv = rgbToHsv;\n  public static rgbToHwb = rgbToHwb;\n  public static rgbaToHex = rgbaToHex;\n  public static hslToRgb = hsvToRgb;\n  public static hsvToRgb = hsvToRgb;\n  public static hueToRgb = hueToRgb;\n  public static hwbToRgb = hwbToRgb;\n  public static parseIntFromHex = parseIntFromHex;\n  public static stringInputToObject = stringInputToObject;\n  public static inputToRGB = inputToRGB;\n  public static roundPart = roundPart;\n  public static webColors = webColors;\n  public static nonColors = nonColors;\n  public static version = version;\n\n  // main public properties\n  public r: number;\n  public g: number;\n  public b: number;\n  public a: number;\n  public format: string;\n  public ok: boolean;\n  public originalInput?: string | Color | ColorInputTypes;\n\n  // main public methods\n  constructor(input?: ColorInputTypes | Partial<Color>, config?: ColorFormats) {\n    const configFormat = config && COLOR_FORMAT.includes(config) ? config : '';\n\n    // If input is already a `Color` or compatible object, clone its values\n    const { r, g, b, a, ok, format } = inputToRGB(input);\n\n    this.originalInput = input;\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    this.ok = ok;\n    this.format = configFormat || format;\n  }\n\n  /**\n   * Checks if the current input value is a valid colour.\n   */\n  get isValid(): boolean {\n    return this.ok;\n  }\n\n  /**\n   * Checks if the current colour requires a light text colour.\n   */\n  get isDark(): boolean {\n    return this.brightness < 120;\n  }\n\n  /**\n   * Returns the perceived luminance of a colour.\n   *\n   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n   */\n  get luminance(): number {\n    const { r, g, b } = this;\n    let R = 0;\n    let G = 0;\n    let B = 0;\n\n    if (r <= 0.03928) {\n      R = r / 12.92;\n    } else {\n      R = ((r + 0.055) / 1.055) ** 2.4;\n    }\n    if (g <= 0.03928) {\n      G = g / 12.92;\n    } else {\n      G = ((g + 0.055) / 1.055) ** 2.4;\n    }\n    if (b <= 0.03928) {\n      B = b / 12.92;\n    } else {\n      B = ((b + 0.055) / 1.055) ** 2.4;\n    }\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  }\n\n  /**\n   * Returns the perceived brightness of the colour.\n   */\n  get brightness(): number {\n    const { r, g, b } = this.toRgb();\n    return (r * 299 + g * 587 + b * 114) / 1000;\n  }\n\n  /**\n   * Returns the web colour name closest to the current colour.\n   */\n  get name(): string {\n    const { r, g, b } = this.toRgb();\n    const [colorName] = webColors\n      .map(([name, rgb]): [string, number] => {\n        const distance =\n          // ((rgb.r - r) ** 2 + (rgb.g - g) ** 2 + (rgb.b - b) ** 2) ** 0.5; // standard\n          (((rgb.r - r) * 0.3) ** 2 + ((rgb.g - g) * 0.6) ** 2 + ((rgb.b - b) * 0.1) ** 2) ** 0.5; // perceived\n        return [name, distance];\n      })\n      .find(([, distance], _, ar) => {\n        return distance === Math.min(...ar.map(([, d]) => d));\n      }) as [string, number];\n\n    return colorName;\n  }\n\n  /**\n   * Returns the colour as an RGBA object.\n   */\n  toRgb(): RGBA {\n    let { r, g, b, a } = this;\n\n    [r, g, b] = [r, g, b].map(n => roundPart(n * 255 * 100) / 100);\n    a = roundPart(a * 100) / 100;\n    return {\n      r,\n      g,\n      b,\n      a,\n    };\n  }\n\n  /**\n   * Returns the RGBA values concatenated into a CSS3 Module string format.\n   * * rgb(255,255,255)\n   * * rgba(255,255,255,0.5)\n   */\n  toRgbString(): string {\n    const { r, g, b, a } = this.toRgb();\n    const [R, G, B] = [r, g, b].map(roundPart);\n\n    return a === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${a})`;\n  }\n\n  /**\n   * Returns the RGBA values concatenated into a CSS4 Module string format.\n   * * rgb(255 255 255)\n   * * rgb(255 255 255 / 50%)\n   */\n  toRgbCSS4String(): string {\n    const { r, g, b, a } = this.toRgb();\n    const [R, G, B] = [r, g, b].map(roundPart);\n    const A = a === 1 ? '' : ` / ${roundPart(a * 100)}%`;\n\n    return `rgb(${R} ${G} ${B}${A})`;\n  }\n\n  /**\n   * Returns the hexadecimal value of the colour. When the parameter is *true*\n   * it will find a 3 characters shorthand of the decimal value.\n   */\n  toHex(allow3Char?: boolean | undefined): string {\n    const { r, g, b, a } = this.toRgb();\n\n    return a === 1 ? rgbToHex(r, g, b, allow3Char) : rgbaToHex(r, g, b, a, allow3Char);\n  }\n\n  /**\n   * Returns the CSS valid hexadecimal vaue of the colour. When the parameter is *true*\n   * it will find a 3 characters shorthand of the value.\n   */\n  toHexString(allow3Char?: boolean | undefined): string {\n    return `#${this.toHex(allow3Char)}`;\n  }\n\n  /**\n   * Returns the HEX8 value of the colour.\n   */\n  toHex8(allow4Char?: boolean | undefined): string {\n    const { r, g, b, a } = this.toRgb();\n\n    return rgbaToHex(r, g, b, a, allow4Char);\n  }\n\n  /**\n   * Returns the HEX8 value of the colour.\n   */\n  toHex8String(allow4Char?: boolean | undefined): string {\n    return `#${this.toHex8(allow4Char)}`;\n  }\n\n  /**\n   * Returns the colour as a HSVA object.\n   */\n  toHsv(): HSVA {\n    const { r, g, b, a } = this;\n    const { h, s, v } = rgbToHsv(r, g, b);\n\n    return {\n      h,\n      s,\n      v,\n      a,\n    };\n  }\n\n  /**\n   * Returns the colour as an HSLA object.\n   */\n  toHsl(): HSLA {\n    const { r, g, b, a } = this;\n    const { h, s, l } = rgbToHsl(r, g, b);\n\n    return {\n      h,\n      s,\n      l,\n      a,\n    };\n  }\n\n  /**\n   * Returns the HSLA values concatenated into a CSS3 Module format string.\n   * * `hsl(150, 100%, 50%)`\n   * * `hsla(150, 100%, 50%, 0.5)`\n   */\n  toHslString(): string {\n    let { h, s, l, a } = this.toHsl();\n    h = roundPart(h * 360);\n    s = roundPart(s * 100);\n    l = roundPart(l * 100);\n    a = roundPart(a * 100) / 100;\n\n    return a === 1 ? `hsl(${h}, ${s}%, ${l}%)` : `hsla(${h}, ${s}%, ${l}%, ${a})`;\n  }\n\n  /**\n   * Returns the HSLA values concatenated into a CSS4 Module format string.\n   * * `hsl(150deg 100% 50%)`\n   * * `hsl(150deg 100% 50% / 50%)`\n   */\n  toHslCSS4String(): string {\n    let { h, s, l, a } = this.toHsl();\n    h = roundPart(h * 360);\n    s = roundPart(s * 100);\n    l = roundPart(l * 100);\n    a = roundPart(a * 100);\n    const A = a < 100 ? ` / ${roundPart(a)}%` : '';\n\n    return `hsl(${h}deg ${s}% ${l}%${A})`;\n  }\n\n  /**\n   * Returns the colour as an HWBA object.\n   */\n  toHwb(): HWBA {\n    const { r, g, b, a } = this;\n    const { h, w, b: bl } = rgbToHwb(r, g, b);\n    return {\n      h,\n      w,\n      b: bl,\n      a,\n    };\n  }\n\n  /**\n   * Returns the HWBA values concatenated into a string.\n   */\n  toHwbString(): string {\n    let { h, w, b, a } = this.toHwb();\n    h = roundPart(h * 360);\n    w = roundPart(w * 100);\n    b = roundPart(b * 100);\n    a = roundPart(a * 100);\n    const A = a < 100 ? ` / ${roundPart(a)}%` : '';\n\n    return `hwb(${h}deg ${w}% ${b}%${A})`;\n  }\n\n  /**\n   * Sets the alpha value of the current colour.\n   */\n  setAlpha(alpha?: number): Color {\n    if (typeof alpha !== 'number') return this;\n    this.a = boundAlpha(alpha);\n    return this;\n  }\n\n  /**\n   * Saturate the colour with a given amount.\n   */\n  saturate(amount?: number): Color {\n    if (typeof amount !== 'number') return this;\n    const { h, s, l } = this.toHsl();\n    const { r, g, b } = hslToRgb(h, clamp01(s + amount / 100), l);\n\n    Object.assign(this, { r, g, b });\n    return this;\n  }\n\n  /**\n   * Desaturate the colour with a given amount.\n   */\n  desaturate(amount?: number): Color {\n    return typeof amount === 'number' ? this.saturate(-amount) : this;\n  }\n\n  /**\n   * Completely desaturates a colour into greyscale.\n   * Same as calling `desaturate(100)`\n   */\n  greyscale(): Color {\n    return this.saturate(-100);\n  }\n\n  /**\n   * Increase the colour lightness with a given amount.\n   */\n  lighten(amount?: number): Color {\n    if (typeof amount !== 'number') return this;\n\n    const { h, s, l } = this.toHsl();\n    const { r, g, b } = hslToRgb(h, s, clamp01(l + amount / 100));\n\n    Object.assign(this, { r, g, b });\n    return this;\n  }\n\n  /**\n   * Decrease the colour lightness with a given amount.\n   */\n  darken(amount?: number): Color {\n    return typeof amount === 'number' ? this.lighten(-amount) : this;\n  }\n\n  /**\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n   * Values outside of this range will be wrapped into this range.\n   */\n  spin(amount?: number): Color {\n    if (typeof amount !== 'number') return this;\n\n    const { h, s, l } = this.toHsl();\n    const { r, g, b } = hslToRgb(clamp01(((h * 360 + amount) % 360) / 360), s, l);\n\n    Object.assign(this, { r, g, b });\n    return this;\n  }\n\n  /** Returns a clone of the current `Color` instance. */\n  clone(): Color {\n    return new Color(this);\n  }\n\n  /**\n   * Returns the colour value in CSS valid string format.\n   */\n  toString(allowShort?: boolean | undefined): string {\n    const { format } = this;\n\n    if (format === 'hex') return this.toHexString(allowShort);\n    if (format === 'hsl') return this.toHslString();\n    if (format === 'hwb') return this.toHwbString();\n\n    return this.toRgbString();\n  }\n}\n"],"names":["nonColors","roundPart","v","floor","webColors","ANGLES","CSS_INTEGER","CSS_NUMBER","CSS_ANGLE","CSS_UNIT","CSS_UNIT2","START_MATCH","END_MATCH","SEP","PERMISSIVE_MATCH","matchers","isNonColor","str","isColorType","obj","inst","c","isOnePointZero","n","isPercentage","isValidCSSUnit","comp","COLOR_FORMAT","isColorName","color","f","bound01","N","max","processPercent","boundAlpha","a","na","clamp01","pad2","getRGBFromName","name","rgbValue","k","parseIntFromHex","val","convertHexToDecimal","h","convertDecimalToHex","d","rgbToHsl","r","g","b","min","s","l","hueToRgb","p","q","t","T","hslToRgb","rgbToHwb","i","whiteness","black","hwbToRgb","H","W","B","gray","rgbToHsv","hsvToRgb","S","V","mod","rgbToHex","allow3Char","hex","rgbaToHex","allow4Char","stringInputToObject","input","m1","m2","m3","m4","inputToRGB","rgb","w","format","ok","Color","version","config","configFormat","R","G","colorName","distance","_","ar","A","bl","alpha","amount","allowShort"],"mappings":"kCAGA,MAAMA,EAAY,CAAC,cAAe,eAAgB,UAAW,SAAU,SAAS,ECA1EC,EAAaC,GAAsB,CACjC,MAAAC,EAAQ,KAAK,MAAMD,CAAC,EAC1B,OAAOA,EAAIC,EAAQ,GAAMA,EAAQ,KAAK,MAAMD,CAAC,CAC/C,ECAME,EAA6B,CACjC,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,eACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,EACH,EAAG,EACH,EAAG,CACL,CACF,EACA,CACE,iBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,EACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,iBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,OACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,WACA,CACE,EAAG,EACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,WACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,iBACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,CACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,eACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,GACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,GACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,gBACA,CACE,EAAG,GACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,gBACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,OACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,OACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,OACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,SACA,CACE,EAAG,GACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,eACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,uBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,eACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,iBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,iBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,iBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,YACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,CACL,CACF,EACA,CACE,mBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,EACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,eACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,eACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,iBACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,kBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,oBACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,kBACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,kBACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,eACA,CACE,EAAG,GACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,EACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,CACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,OACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,GACL,CACF,EACA,CACE,gBACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,MACA,CACE,EAAG,IACH,EAAG,EACH,EAAG,CACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,WACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,EACL,CACF,EACA,CACE,WACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,cACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,YACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,MACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,OACA,CACE,EAAG,EACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,UACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,GACH,EAAG,EACL,CACF,EACA,CACE,YACA,CACE,EAAG,GACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,QACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,aACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,GACL,CACF,EACA,CACE,SACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,CACL,CACF,EACA,CACE,cACA,CACE,EAAG,IACH,EAAG,IACH,EAAG,EACL,CACF,CACF,ECtqCMC,EAAS,oBAGTC,EAAc,gBAIdC,EAAa,uBAIbC,EAAY,yBAAyBH,MAGrCI,EAAW,MAAMF,SAAkBD,KAGnCI,EAAY,MAAMD,SAAgBD,MAGlCG,GAAc,+BACdC,GAAY,qBAEZC,EAAM,eAMNC,EAAmB,GAAGH,MAAeD,KAAaG,KAAOJ,KAAYI,KAAOJ,sBAAoBA,MAAaG,KAE7GG,EAAW,CACf,SAAU,IAAI,OAAOL,CAAS,EAC9B,OAAAL,EACA,UAAAG,EACA,YAAAF,EACA,WAAAC,EACA,UAAAG,EACA,iBAAAI,EACA,IAAK,IAAI,OAAO,MAAMA,GAAkB,EACxC,IAAK,IAAI,OAAO,YAAYA,GAAkB,EAC9C,IAAK,IAAI,OAAO,YAAYA,GAAkB,EAC9C,IAAK,IAAI,OAAO,YAAYA,GAAkB,EAC9C,KAAM,uDACN,KAAM,uDACN,KAAM,uEACN,KAAM,sEACR,EC3CME,EAAgCC,GAC5BjB,EAAkB,SAASiB,CAAG,ECHlCC,EAAc,CAClBC,EACAC,IAEOD,IAAQ,MAAQ,OAAOA,GAAQ,UAAY,OAAO,KAAKC,CAAI,EAAE,MAAWC,GAAAA,KAAKF,CAAG,ECHnFG,EAAkBC,GACf,GAAGA,IAAI,SAAS,GAAG,GAAK,WAAWA,CAAW,IAAM,ECFvDC,EAAgBD,GACb,OAAOA,GAAM,UAAYA,EAAE,SAAS,GAAG,ECE1CE,EAAkBC,GACf,EAAQX,EAAS,SAAS,KAAK,GAAGW,GAAM,ECN3CC,EAAe,CAAC,MAAO,MAAO,MAAO,MAAO,KAAK,ECUjDC,EAAeC,GACf7B,EAAU,SAAS6B,CAAK,GAAK,CAAC,IAAK,GAAGF,CAAY,EAAE,KAAUG,GAAAD,EAAM,SAASC,CAAC,CAAC,EAC1E,GAGF1B,EAAU,KAAK,CAAC,CAACiB,CAAC,IAAMQ,IAAUR,CAAC,ECXtCU,EAAU,CAACC,EAAoBC,IAAwB,CAC3D,IAAIV,EAAIS,EAER,GACE,OAAOA,GAAM,UACb,KAAK,IAAIA,EAAG,CAAC,IAAM,GACnB,KAAK,IAAIA,EAAG,CAAC,IAAM,EAEZ,OAAAA,EAELV,EAAeU,CAAC,IAAOT,EAAA,QAErB,MAAAW,EAAiBV,EAAaD,CAAC,EAOrC,OANAA,EAAIU,IAAQ,IAAM,WAAWV,CAAW,EAAI,KAAK,IAAIU,EAAK,KAAK,IAAI,EAAG,WAAWV,CAAW,CAAC,CAAC,EAG1FW,IAAgBX,EAAKA,EAAIU,EAAO,KAGhC,KAAK,IAAIV,EAAIU,CAAG,EAAI,KACf,GAGLA,IAAQ,IAIVV,GAAKA,EAAI,EAAKA,EAAIU,EAAOA,EAAMV,EAAIU,GAAOA,EAI1CV,EAAKA,EAAIU,EAAOA,EAEXV,EACT,ECpCMY,EAAcC,GAA+B,CAC7C,IAAAC,EAAK,WAAWD,CAAW,EAE/B,OAAI,OAAO,MAAMC,CAAE,GAAKA,EAAK,GAAKA,EAAK,KAChCA,EAAA,GAGAA,CACT,ECRMC,EAAWpC,GACR,KAAK,IAAI,EAAG,KAAK,IAAI,EAAGA,CAAC,CAAC,ECD7BqC,EAAQlB,GACLA,EAAE,SAAW,EAAI,IAAIA,IAAM,OAAOA,CAAC,ECGtCmB,EAAkBC,GAAsB,CAC5C,KAAM,CAAC,CAAG,CAAAC,CAAQ,CAAC,EAAItC,EAAU,OAAO,CAAC,CAACuC,CAAC,IAAMA,IAAMF,EAAK,YAAa,CAAA,EAElE,OAAAC,CACT,ECRME,EAAmBC,GAChB,SAASA,EAAK,EAAE,ECCnBC,EAAuBC,GACpBH,EAAgBG,CAAC,EAAI,ICDxBC,EAAuBC,GACpBhD,EAAUgD,EAAI,GAAG,EAAE,SAAS,EAAE,ECDjCC,EAAW,CAACC,EAAWC,EAAWC,IAAmB,CACzD,MAAMpB,EAAM,KAAK,IAAIkB,EAAGC,EAAGC,CAAC,EACtBC,EAAM,KAAK,IAAIH,EAAGC,EAAGC,CAAC,EAC5B,IAAIN,EAAI,EACJQ,EAAI,EACF,MAAAC,GAAKvB,EAAMqB,GAAO,EACxB,GAAIrB,IAAQqB,EACNC,EAAA,EACAR,EAAA,MACC,CACL,MAAME,EAAIhB,EAAMqB,EAChBC,EAAIC,EAAI,GAAMP,GAAK,EAAIhB,EAAMqB,GAAOL,GAAKhB,EAAMqB,GAC3CrB,IAAQkB,IAAGJ,GAAKK,EAAIC,GAAKJ,GAAKG,EAAIC,EAAI,EAAI,IAC1CpB,IAAQmB,IAAQL,GAAAM,EAAIF,GAAKF,EAAI,GAC7BhB,IAAQoB,IAAQN,GAAAI,EAAIC,GAAKH,EAAI,GAE5BF,GAAA,EAEA,MAAA,CAAE,EAAAA,EAAG,EAAAQ,EAAG,EAAAC,EACjB,ECrBMC,EAAW,CAACC,EAAWC,EAAWC,IAAsB,CAC5D,IAAIC,EAAID,EAGR,OAFIC,EAAI,IAAQA,GAAA,GACZA,EAAI,IAAQA,GAAA,GACZA,EAAI,EAAI,EAAUH,GAAKC,EAAID,IAAM,EAAIG,GACrCA,EAAI,EAAI,EAAUF,EAClBE,EAAI,EAAI,EAAUH,GAAKC,EAAID,IAAM,EAAI,EAAIG,GAAK,EAC3CH,CACT,ECLMI,EAAW,CAACf,EAAWQ,EAAWC,IAAmB,CACzD,IAAIL,EAAI,EACJC,EAAI,EACJC,EAAI,EAER,GAAIE,IAAM,EAEJH,EAAAI,EACAH,EAAAG,EACAL,EAAAK,UACKA,EAAG,CACN,MAAAG,EAAIH,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCG,EAAI,EAAIF,EAAIG,EAClBR,EAAIM,EAASC,EAAGC,EAAGZ,EAAI,EAAI,CAAC,EACxBK,EAAAK,EAASC,EAAGC,EAAGZ,CAAC,EACpBM,EAAII,EAASC,EAAGC,EAAGZ,EAAI,EAAI,CAAC,EAGvB,MAAA,CAAE,EAAAI,EAAG,EAAAC,EAAG,EAAAC,EACjB,ECjBMU,EAAW,CAACZ,EAAWC,EAAWC,IAAmB,CACzD,IAAIvB,EAAI,EACJkC,EAAI,EACR,MAAMC,EAAY,KAAK,IAAId,EAAGC,EAAGC,CAAC,EAC5BpB,EAAM,KAAK,IAAIkB,EAAGC,EAAGC,CAAC,EACtBa,EAAQ,EAAIjC,EAElB,GAAIA,IAAQgC,EAAW,MAAO,CAAE,EAAG,EAAG,EAAGA,EAAW,EAAGC,GACnDf,IAAMc,GACRnC,EAAIsB,EAAIC,EACJW,EAAA,IAEJlC,EAAIsB,IAAMa,EAAYZ,EAAIF,EAAIA,EAAIC,EAC9BY,EAAAZ,IAAMa,EAAY,EAAI,GAG5B,MAAMlB,GAAKiB,EAAIlC,GAAKG,EAAMgC,IAAc,EACjC,MAAA,CACL,EAAGlB,IAAM,EAAI,EAAIA,EACjB,EAAGkB,EACH,EAAGC,CAAA,CAEP,ECrBMC,EAAW,CAACC,EAAWC,EAAWC,IAAmB,CACrD,GAAAD,EAAIC,GAAK,EAAG,CACR,MAAAC,EAAOF,GAAKA,EAAIC,GACtB,MAAO,CAAE,EAAGC,EAAMA,EAAS,EAAGA,GAE5B,GAAA,CAAE,EAAApB,EAAG,EAAAC,EAAG,EAAAC,CAAA,EAAMS,EAASM,EAAG,EAAG,EAAG,EACpC,OAACjB,EAAGC,EAAGC,CAAC,EAAI,CAACF,EAAGC,EAAGC,CAAC,EAAE,IAASnD,GAAAA,GAAK,EAAImE,EAAIC,GAAKD,CAAC,EAE3C,CAAE,EAAAlB,EAAG,EAAAC,EAAG,EAAAC,EACjB,ECbMmB,EAAW,CAACrB,EAAWC,EAAWC,IAAmB,CACzD,MAAMpB,EAAM,KAAK,IAAIkB,EAAGC,EAAGC,CAAC,EACtBC,EAAM,KAAK,IAAIH,EAAGC,EAAGC,CAAC,EAC5B,IAAIN,EAAI,EACR,MAAM7C,EAAI+B,EACJgB,EAAIhB,EAAMqB,EACVC,EAAItB,IAAQ,EAAI,EAAIgB,EAAIhB,EAC9B,OAAIA,IAAQqB,EACNP,EAAA,GAEAI,IAAMlB,IAAKc,GAAKK,EAAIC,GAAKJ,GAAKG,EAAIC,EAAI,EAAI,IAC1CD,IAAMnB,IAAUc,GAAAM,EAAIF,GAAKF,EAAI,GAC7BI,IAAMpB,IAAUc,GAAAI,EAAIC,GAAKH,EAAI,GAE5BF,GAAA,GAEA,CAAE,EAAAA,EAAG,EAAAQ,EAAG,EAAArD,EACjB,ECjBMuE,EAAW,CAACL,EAAWM,EAAWC,IAAmB,CACzD,MAAM5B,EAAIqB,EAAI,EACR,EAAIM,EACJxE,EAAIyE,EACJX,EAAI,KAAK,MAAMjB,CAAC,EAChBjB,EAAIiB,EAAIiB,EACRN,EAAIxD,GAAK,EAAI,GACbyD,EAAIzD,GAAK,EAAI4B,EAAI,GACjB8B,EAAI1D,GAAK,GAAK,EAAI4B,GAAK,GACvB8C,EAAMZ,EAAI,EACVb,EAAI,CAACjD,EAAGyD,EAAGD,EAAGA,EAAGE,EAAG1D,CAAC,EAAE0E,CAAG,EAC1BxB,EAAI,CAACQ,EAAG1D,EAAGA,EAAGyD,EAAGD,EAAGA,CAAC,EAAEkB,CAAG,EAC1BvB,EAAI,CAACK,EAAGA,EAAGE,EAAG1D,EAAGA,EAAGyD,CAAC,EAAEiB,CAAG,EACzB,MAAA,CAAE,EAAAzB,EAAG,EAAAC,EAAG,EAAAC,EACjB,ECVMwB,EAAW,CAAC1B,EAAWC,EAAWC,EAAWyB,IAAiC,CAClF,MAAMC,EAAM,CACVxC,EAAKtC,EAAUkD,CAAC,EAAE,SAAS,EAAE,CAAC,EAC9BZ,EAAKtC,EAAUmD,CAAC,EAAE,SAAS,EAAE,CAAC,EAC9Bb,EAAKtC,EAAUoD,CAAC,EAAE,SAAS,EAAE,CAAC,CAAA,EAIhC,OACEyB,GACAC,EAAI,CAAC,EAAE,OAAO,CAAC,IAAMA,EAAI,CAAC,EAAE,OAAO,CAAC,GACpCA,EAAI,CAAC,EAAE,OAAO,CAAC,IAAMA,EAAI,CAAC,EAAE,OAAO,CAAC,GACpCA,EAAI,CAAC,EAAE,OAAO,CAAC,IAAMA,EAAI,CAAC,EAAE,OAAO,CAAC,EAE7BA,EAAI,CAAC,EAAE,OAAO,CAAC,EAAIA,EAAI,CAAC,EAAE,OAAO,CAAC,EAAIA,EAAI,CAAC,EAAE,OAAO,CAAC,EAGvDA,EAAI,KAAK,EAAE,CACpB,ECpBMC,EAAY,CAAC7B,EAAWC,EAAWC,EAAWjB,EAAW6C,IAAiC,CAC9F,MAAMF,EAAM,CACVxC,EAAKtC,EAAUkD,CAAC,EAAE,SAAS,EAAE,CAAC,EAC9BZ,EAAKtC,EAAUmD,CAAC,EAAE,SAAS,EAAE,CAAC,EAC9Bb,EAAKtC,EAAUoD,CAAC,EAAE,SAAS,EAAE,CAAC,EAC9Bd,EAAKS,EAAoBZ,CAAC,CAAC,CAAA,EAK3B,OAAA6C,GACAF,EAAI,CAAC,EAAE,OAAO,CAAC,IAAMA,EAAI,CAAC,EAAE,OAAO,CAAC,GACpCA,EAAI,CAAC,EAAE,OAAO,CAAC,IAAMA,EAAI,CAAC,EAAE,OAAO,CAAC,GACpCA,EAAI,CAAC,EAAE,OAAO,CAAC,IAAMA,EAAI,CAAC,EAAE,OAAO,CAAC,GACpCA,EAAI,CAAC,EAAE,OAAO,CAAC,IAAMA,EAAI,CAAC,EAAE,OAAO,CAAC,EAE7BA,EAAI,CAAC,EAAE,OAAO,CAAC,EAAIA,EAAI,CAAC,EAAE,OAAO,CAAC,EAAIA,EAAI,CAAC,EAAE,OAAO,CAAC,EAAIA,EAAI,CAAC,EAAE,OAAO,CAAC,EAE1EA,EAAI,KAAK,EAAE,CACpB,ECVMG,EAAuBC,GAA8D,CACzF,MAAMtD,EAAgB,OAAOsD,CAAK,EAAE,KAAA,EAAO,cAEvC,GAAAvD,EAAYC,CAAK,EACnB,OAAO,OAAO,OAAOW,EAAeX,CAAK,EAAG,CAC1C,EAAG,EACH,OAAQ,MACR,GAAI,EAAA,CACL,EAEC,GAAAb,EAAWa,CAAK,EAEX,MAAA,CACL,EAAG,EACH,EAAG,EACH,EAAG,EACH,EALQA,IAAU,cAAgB,EAAI,EAMtC,OAAQ,MACR,GAAI,EAAA,EASR,GAAI,EAAGuD,EAAIC,EAAIC,EAAIC,CAAE,EAAIxE,EAAS,IAAI,KAAKc,CAAK,GAAK,CAAA,EACjD,OAAAuD,GAAMC,GAAMC,EACP,CACLF,EACA,EAAGC,EACH,EAAGC,EACH,EAAGC,IAAO,OAAYA,EAAK,EAC3B,OAAQ,MACR,GAAI,EAAA,GAIP,CAAA,CAAEH,EAAIC,EAAIC,EAAIC,CAAE,EAAIxE,EAAS,IAAI,KAAKc,CAAK,GAAK,GAC7CuD,GAAMC,GAAMC,EACP,CACL,EAAGF,EACH,EAAGC,EACH,EAAGC,EACH,EAAGC,IAAO,OAAYA,EAAK,EAC3B,OAAQ,MACR,GAAI,EAAA,GAIP,CAAA,CAAEH,EAAIC,EAAIC,EAAIC,CAAE,EAAIxE,EAAS,IAAI,KAAKc,CAAK,GAAK,GAC7CuD,GAAMC,GAAMC,EACP,CACL,EAAGF,EACH,EAAGC,EACH,EAAGC,EACH,EAAGC,IAAO,OAAYA,EAAK,EAC3B,OAAQ,MACR,GAAI,EAAA,GAIP,CAAA,CAAEH,EAAIC,EAAIC,EAAIC,CAAE,EAAIxE,EAAS,IAAI,KAAKc,CAAK,GAAK,GAC7CuD,GAAMC,GAAMC,EACP,CACL,EAAGF,EACH,EAAGC,EACH,EAAGC,EACH,EAAGC,IAAO,OAAYA,EAAK,EAC3B,OAAQ,MACR,GAAI,EAAA,GAIP,CAAA,CAAEH,EAAIC,EAAIC,EAAIC,CAAE,EAAIxE,EAAS,KAAK,KAAKc,CAAK,GAAK,GAC9CuD,GAAMC,GAAMC,GAAMC,EACb,CACL,EAAG3C,EAAgBwC,CAAE,EACrB,EAAGxC,EAAgByC,CAAE,EACrB,EAAGzC,EAAgB0C,CAAE,EACrB,EAAGxC,EAAoByC,CAAE,EACzB,OAAQ,MACR,GAAI,EAAA,GAIP,EAAEH,EAAIC,EAAIC,CAAE,EAAIvE,EAAS,KAAK,KAAKc,CAAK,GAAK,GAC1CuD,GAAMC,GAAMC,EACP,CACL,EAAG1C,EAAgBwC,CAAE,EACrB,EAAGxC,EAAgByC,CAAE,EACrB,EAAGzC,EAAgB0C,CAAE,EACrB,EAAG,EACH,OAAQ,MACR,GAAI,EAAA,GAIP,CAAA,CAAEF,EAAIC,EAAIC,EAAIC,CAAE,EAAIxE,EAAS,KAAK,KAAKc,CAAK,GAAK,GAC9CuD,GAAMC,GAAMC,GAAMC,EACb,CACL,EAAG3C,EAAgBwC,EAAKA,CAAE,EAC1B,EAAGxC,EAAgByC,EAAKA,CAAE,EAC1B,EAAGzC,EAAgB0C,EAAKA,CAAE,EAC1B,EAAGxC,EAAoByC,EAAKA,CAAE,EAC9B,OAAQ,MACR,GAAI,EAAA,GAIP,EAAEH,EAAIC,EAAIC,CAAE,EAAIvE,EAAS,KAAK,KAAKc,CAAK,GAAK,GAC1CuD,GAAMC,GAAMC,EACP,CACL,EAAG1C,EAAgBwC,EAAKA,CAAE,EAC1B,EAAGxC,EAAgByC,EAAKA,CAAE,EAC1B,EAAGzC,EAAgB0C,EAAKA,CAAE,EAC1B,EAAG,EACH,OAAQ,MACR,GAAI,EAAA,EAID,CACL,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,OAAQ,MACR,GAAK,CAAAH,CAAe,QAExB,EC9GMK,EAAcL,GAAwC,CAC1D,IAAIM,EAAM,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GACvB5D,EAAQsD,EACR/C,EAAI,EACJ,EACAlC,EACAsD,EACAkC,EACArC,EACAN,EACAI,EACAC,EACAuC,EAAS,MACTC,EAAK,GAET,OAAI,CAAC/D,GAAS,OAAOA,GAAU,YAC7BA,EAAQqD,EAAoBrD,CAAe,EAC3C+D,EAAM/D,EAAqB,IAI3BX,EAAYW,EAAO4D,CAAG,GACtBhE,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,IAErB,CAAE,EAAAsB,EAAG,EAAAC,EAAG,EAAAC,CAAA,EAAMxB,EAEf,CAACsB,EAAGC,EAAGC,CAAC,EAAI,CAACF,EAAGC,EAAGC,CAAC,EAAE,IAAI9B,GAAKQ,EAAQR,EAAGC,EAAaD,CAAC,EAAI,IAAM,GAAG,CAAC,EAChEkE,EAAA,CAAE,EAAAtC,EAAG,EAAAC,EAAG,EAAAC,CAAE,EACPsC,EAAA,WAAY9D,EAASA,EAAqB,OAAS,OAG5DX,EAAYW,EAAO,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvCJ,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,IAErB,CAAE,EAAAkB,EAAG,EAAG,EAAA7C,CAAA,EAAM2B,EACXkB,EAAAhB,EAAQgB,EAAG,GAAG,EACd,EAAAhB,EAAQ,EAAG,GAAG,EACd7B,EAAA6B,EAAQ7B,EAAG,GAAG,EACZuF,EAAAhB,EAAS1B,EAAG,EAAG7C,CAAC,EACbyF,EAAA,OAGTzE,EAAYW,EAAO,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvCJ,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,IAErB,CAAE,EAAAkB,EAAG,EAAG,EAAAS,CAAA,EAAM3B,EACXkB,EAAAhB,EAAQgB,EAAG,GAAG,EACd,EAAAhB,EAAQ,EAAG,GAAG,EACdyB,EAAAzB,EAAQyB,EAAG,GAAG,EACZiC,EAAA3B,EAASf,EAAG,EAAGS,CAAC,EACbmC,EAAA,OAGTzE,EAAYW,EAAO,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvCJ,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,GACtBJ,EAAeI,EAAM,CAAC,IAErB,CAAE,EAAAkB,EAAG,EAAA2C,EAAG,EAAArC,CAAA,EAAMxB,EACXkB,EAAAhB,EAAQgB,EAAG,GAAG,EACd2C,EAAA3D,EAAQ2D,EAAG,GAAG,EACdrC,EAAAtB,EAAQsB,EAAG,GAAG,EACZoC,EAAAtB,EAASpB,EAAG2C,EAAGrC,CAAC,EACbsC,EAAA,OAGPlE,EAAgBI,EAAqB,CAAC,IACxCO,EAAKP,EAAqB,EACtBO,EAAAZ,EAAaY,CAAC,GAAK,WAAW,GAAGA,GAAG,EAAI,EAAIL,EAAQK,EAAG,GAAG,EAAIA,GAG7D,CACL,EAAGqD,EAAI,EACP,EAAGA,EAAI,EACP,EAAGA,EAAI,EACP,EAAGtD,EAAWC,CAAC,EACf,OAAAuD,EACA,GAAAC,CAAA,CAEJ,aC7EA,MAAqBC,CAAM,CAEzB,OAAc,SAAW9E,EACzB,OAAc,eAAiBO,EAC/B,OAAc,aAAeE,EAC7B,OAAc,eAAiBC,EAC/B,OAAc,WAAaT,EAC3B,OAAc,YAAcY,EAC5B,OAAc,YAAcV,EAC5B,OAAc,KAAOqB,EACrB,OAAc,QAAUD,EACxB,OAAc,QAAUP,EACxB,OAAc,WAAaI,EAC3B,OAAc,eAAiBK,EAC/B,OAAc,oBAAsBM,EACpC,OAAc,oBAAsBE,EACpC,OAAc,SAAWE,EACzB,OAAc,SAAW2B,EACzB,OAAc,SAAWL,EACzB,OAAc,SAAWT,EACzB,OAAc,UAAYiB,EAC1B,OAAc,SAAWP,EACzB,OAAc,SAAWA,EACzB,OAAc,SAAWhB,EACzB,OAAc,SAAWU,EACzB,OAAc,gBAAkBvB,EAChC,OAAc,oBAAsBsC,EACpC,OAAc,WAAaM,EAC3B,OAAc,UAAYvF,EAC1B,OAAc,UAAYG,EAC1B,OAAc,UAAYJ,EAC1B,OAAc,QAAU8F,GAGjB,EACA,EACA,EACA,EACA,OACA,GACA,cAGP,YAAYX,EAA0CY,EAAuB,CAC3E,MAAMC,EAAeD,GAAUpE,EAAa,SAASoE,CAAM,EAAIA,EAAS,GAGlE,CAAE,EAAA5C,EAAG,EAAAC,EAAG,EAAAC,EAAG,EAAAjB,EAAG,GAAAwD,EAAI,OAAAD,CAAW,EAAAH,EAAWL,CAAK,EAEnD,KAAK,cAAgBA,EACrB,KAAK,EAAIhC,EACT,KAAK,EAAIC,EACT,KAAK,EAAIC,EACT,KAAK,EAAIjB,EACT,KAAK,GAAKwD,EACV,KAAK,OAASI,GAAgBL,CAChC,CAKA,IAAI,SAAmB,CACrB,OAAO,KAAK,EACd,CAKA,IAAI,QAAkB,CACpB,OAAO,KAAK,WAAa,GAC3B,CAOA,IAAI,WAAoB,CACtB,KAAM,CAAE,EAAAxC,EAAG,EAAAC,EAAG,EAAAC,CAAA,EAAM,KACpB,IAAI4C,EAAI,EACJC,EAAI,EACJ5B,EAAI,EAER,OAAInB,GAAK,OACP8C,EAAI9C,EAAI,MAEF8C,IAAA9C,EAAI,MAAS,QAAU,IAE3BC,GAAK,OACP8C,EAAI9C,EAAI,MAEF8C,IAAA9C,EAAI,MAAS,QAAU,IAE3BC,GAAK,OACPiB,EAAIjB,EAAI,MAEFiB,IAAAjB,EAAI,MAAS,QAAU,IAExB,MAAS4C,EAAI,MAASC,EAAI,MAAS5B,CAC5C,CAKA,IAAI,YAAqB,CACvB,KAAM,CAAE,EAAAnB,EAAG,EAAAC,EAAG,EAAAC,CAAE,EAAI,KAAK,QACzB,OAAQF,EAAI,IAAMC,EAAI,IAAMC,EAAI,KAAO,GACzC,CAKA,IAAI,MAAe,CACjB,KAAM,CAAE,EAAAF,EAAG,EAAAC,EAAG,EAAAC,CAAE,EAAI,KAAK,QACnB,CAAC8C,CAAS,EAAI/F,EACjB,IAAI,CAAC,CAACqC,EAAMgD,CAAG,IAAwB,CAChC,MAAAW,KAEDX,EAAI,EAAItC,GAAK,KAAQ,IAAMsC,EAAI,EAAIrC,GAAK,KAAQ,IAAMqC,EAAI,EAAIpC,GAAK,KAAQ,IAAM,GAC/E,MAAA,CAACZ,EAAM2D,CAAQ,CAAA,CACvB,EACA,KAAK,CAAC,CAAA,CAAGA,CAAQ,EAAGC,EAAGC,IACfF,IAAa,KAAK,IAAI,GAAGE,EAAG,IAAI,CAAC,EAAGrD,CAAC,IAAMA,CAAC,CAAC,CACrD,EAEI,OAAAkD,CACT,CAKA,OAAc,CACZ,GAAI,CAAE,EAAAhD,EAAG,EAAAC,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KAErB,OAACe,EAAGC,EAAGC,CAAC,EAAI,CAACF,EAAGC,EAAGC,CAAC,EAAE,OAASpD,EAAU,EAAI,IAAM,GAAG,EAAI,GAAG,EACzDmC,EAAAnC,EAAUmC,EAAI,GAAG,EAAI,IAClB,CACL,EAAAe,EACA,EAAAC,EACA,EAAAC,EACA,EAAAjB,CAAA,CAEJ,CAOA,aAAsB,CACpB,KAAM,CAAE,EAAAe,EAAG,EAAAC,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KAAK,QACtB,CAAC6D,EAAGC,EAAG5B,CAAC,EAAI,CAACnB,EAAGC,EAAGC,CAAC,EAAE,IAAIpD,CAAS,EAElC,OAAAmC,IAAM,EAAI,OAAO6D,MAAMC,MAAM5B,KAAO,QAAQ2B,MAAMC,MAAM5B,MAAMlC,IACvE,CAOA,iBAA0B,CACxB,KAAM,CAAE,EAAAe,EAAG,EAAAC,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KAAK,QACtB,CAAC6D,EAAGC,EAAG5B,CAAC,EAAI,CAACnB,EAAGC,EAAGC,CAAC,EAAE,IAAIpD,CAAS,EACnCsG,EAAInE,IAAM,EAAI,GAAK,MAAMnC,EAAUmC,EAAI,GAAG,KAEzC,MAAA,OAAO6D,KAAKC,KAAK5B,IAAIiC,IAC9B,CAMA,MAAMzB,EAA0C,CAC9C,KAAM,CAAE,EAAG,EAAA1B,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KAAK,QAE5B,OAAOA,IAAM,EAAIyC,EAAS,EAAGzB,EAAGC,EAAGyB,CAAU,EAAIE,EAAU,EAAG5B,EAAGC,EAAGjB,EAAG0C,CAAU,CACnF,CAMA,YAAYA,EAA0C,CAC7C,MAAA,IAAI,KAAK,MAAMA,CAAU,GAClC,CAKA,OAAOG,EAA0C,CAC/C,KAAM,CAAE,EAAG,EAAA7B,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KAAK,QAE5B,OAAO4C,EAAU,EAAG5B,EAAGC,EAAGjB,EAAG6C,CAAU,CACzC,CAKA,aAAaA,EAA0C,CAC9C,MAAA,IAAI,KAAK,OAAOA,CAAU,GACnC,CAKA,OAAc,CACZ,KAAM,CAAE,EAAA9B,EAAG,EAAAC,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KACjB,CAAE,EAAAW,EAAG,EAAAQ,EAAG,EAAArD,CAAA,EAAMsE,EAASrB,EAAGC,EAAGC,CAAC,EAE7B,MAAA,CACL,EAAAN,EACA,EAAAQ,EACA,EAAArD,EACA,EAAAkC,CAAA,CAEJ,CAKA,OAAc,CACZ,KAAM,CAAE,EAAAe,EAAG,EAAAC,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KACjB,CAAE,EAAAW,EAAG,EAAAQ,EAAG,EAAAC,CAAA,EAAMN,EAASC,EAAGC,EAAGC,CAAC,EAE7B,MAAA,CACL,EAAAN,EACA,EAAAQ,EACA,EAAAC,EACA,EAAApB,CAAA,CAEJ,CAOA,aAAsB,CACpB,GAAI,CAAE,EAAAW,EAAG,EAAAQ,EAAG,EAAAC,EAAG,EAAApB,GAAM,KAAK,QACtB,OAAAW,EAAA9C,EAAU8C,EAAI,GAAG,EACjBQ,EAAAtD,EAAUsD,EAAI,GAAG,EACjBC,EAAAvD,EAAUuD,EAAI,GAAG,EACjBpB,EAAAnC,EAAUmC,EAAI,GAAG,EAAI,IAElBA,IAAM,EAAI,OAAOW,MAAMQ,OAAOC,MAAQ,QAAQT,MAAMQ,OAAOC,OAAOpB,IAC3E,CAOA,iBAA0B,CACxB,GAAI,CAAE,EAAAW,EAAG,EAAAQ,EAAG,EAAAC,EAAG,EAAApB,GAAM,KAAK,QACtBW,EAAA9C,EAAU8C,EAAI,GAAG,EACjBQ,EAAAtD,EAAUsD,EAAI,GAAG,EACjBC,EAAAvD,EAAUuD,EAAI,GAAG,EACjBpB,EAAAnC,EAAUmC,EAAI,GAAG,EACrB,MAAMmE,EAAInE,EAAI,IAAM,MAAMnC,EAAUmC,CAAC,KAAO,GAErC,MAAA,OAAOW,QAAQQ,MAAMC,KAAK+C,IACnC,CAKA,OAAc,CACZ,KAAM,CAAE,EAAApD,EAAG,EAAAC,EAAG,EAAAC,EAAG,EAAAjB,GAAM,KACjB,CAAE,EAAAW,EAAG,EAAA2C,EAAG,EAAGc,GAAOzC,EAASZ,EAAGC,EAAGC,CAAC,EACjC,MAAA,CACL,EAAAN,EACA,EAAA2C,EACA,EAAGc,EACH,EAAApE,CAAA,CAEJ,CAKA,aAAsB,CACpB,GAAI,CAAE,EAAAW,EAAG,EAAA2C,EAAG,EAAArC,EAAG,EAAAjB,GAAM,KAAK,QACtBW,EAAA9C,EAAU8C,EAAI,GAAG,EACjB2C,EAAAzF,EAAUyF,EAAI,GAAG,EACjBrC,EAAApD,EAAUoD,EAAI,GAAG,EACjBjB,EAAAnC,EAAUmC,EAAI,GAAG,EACrB,MAAMmE,EAAInE,EAAI,IAAM,MAAMnC,EAAUmC,CAAC,KAAO,GAErC,MAAA,OAAOW,QAAQ2C,MAAMrC,KAAKkD,IACnC,CAKA,SAASE,EAAuB,CAC9B,OAAI,OAAOA,GAAU,SAAiB,MACjC,KAAA,EAAItE,EAAWsE,CAAK,EAClB,KACT,CAKA,SAASC,EAAwB,CAC/B,GAAI,OAAOA,GAAW,SAAiB,OAAA,KACvC,KAAM,CAAE,EAAA3D,EAAG,EAAAQ,EAAG,EAAAC,CAAE,EAAI,KAAK,QACnB,CAAE,EAAAL,EAAG,EAAG,EAAAE,CAAA,EAAMS,EAASf,EAAGT,EAAQiB,EAAImD,EAAS,GAAG,EAAGlD,CAAC,EAE5D,cAAO,OAAO,KAAM,CAAE,EAAAL,EAAG,EAAG,EAAAE,EAAG,EACxB,IACT,CAKA,WAAWqD,EAAwB,CACjC,OAAO,OAAOA,GAAW,SAAW,KAAK,SAAS,CAACA,CAAM,EAAI,IAC/D,CAMA,WAAmB,CACV,OAAA,KAAK,SAAS,IAAI,CAC3B,CAKA,QAAQA,EAAwB,CAC9B,GAAI,OAAOA,GAAW,SAAiB,OAAA,KAEvC,KAAM,CAAE,EAAA3D,EAAG,EAAAQ,EAAG,EAAAC,CAAE,EAAI,KAAK,QACnB,CAAE,EAAAL,EAAG,EAAG,EAAAE,CAAA,EAAMS,EAASf,EAAGQ,EAAGjB,EAAQkB,EAAIkD,EAAS,GAAG,CAAC,EAE5D,cAAO,OAAO,KAAM,CAAE,EAAAvD,EAAG,EAAG,EAAAE,EAAG,EACxB,IACT,CAKA,OAAOqD,EAAwB,CAC7B,OAAO,OAAOA,GAAW,SAAW,KAAK,QAAQ,CAACA,CAAM,EAAI,IAC9D,CAMA,KAAKA,EAAwB,CAC3B,GAAI,OAAOA,GAAW,SAAiB,OAAA,KAEvC,KAAM,CAAE,EAAA3D,EAAG,EAAAQ,EAAG,EAAAC,CAAE,EAAI,KAAK,QACnB,CAAE,EAAAL,EAAG,EAAG,EAAAE,CAAA,EAAMS,EAASxB,GAAUS,EAAI,IAAM2D,GAAU,IAAO,GAAG,EAAGnD,EAAGC,CAAC,EAE5E,cAAO,OAAO,KAAM,CAAE,EAAAL,EAAG,EAAG,EAAAE,EAAG,EACxB,IACT,CAGA,OAAe,CACN,OAAA,IAAIwC,EAAM,IAAI,CACvB,CAKA,SAASc,EAA0C,CAC3C,KAAA,CAAE,OAAAhB,CAAW,EAAA,KAEnB,OAAIA,IAAW,MAAc,KAAK,YAAYgB,CAAU,EACpDhB,IAAW,MAAc,KAAK,cAC9BA,IAAW,MAAc,KAAK,cAE3B,KAAK,aACd,CACF"}