{"version":3,"file":"event-listener.mjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * Advanced event listener based on subscribe / publish pattern.\n *\n * @see https://www.patterns.dev/posts/classic-design-patterns/#observerpatternjavascript\n * @see https://gist.github.com/shystruk/d16c0ee7ac7d194da9644e5d740c8338#file-subpub-js\n * @see https://hackernoon.com/do-you-still-register-window-event-listeners-in-each-component-react-in-example-31a4b1f6f1c8\n */\n\ntype ListenerObject = Map<EventListener, AddEventListenerOptions | undefined | boolean>;\ntype EventsRegistry = Record<string, Map<EventTarget, ListenerObject>>;\nconst registry: EventsRegistry = {};\n\n/**\n * The global event listener. This function must be a Function.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n * eslint-ignore-next\n */\nconst globalListener = (e: Event): void => {\n  const { type, currentTarget } = e;\n\n  [...registry[type]].forEach(([element, listenersMap]) => {\n    /* istanbul ignore else */\n    if (currentTarget === element) {\n      [...listenersMap].forEach(([listener, options]) => {\n        listener.apply(element, [e]);\n\n        if (typeof options === 'object' && options.once) {\n          removeListener(element, type, listener, options);\n        }\n      });\n    }\n  });\n};\n\n/**\n * Register a new listener with its options and attach the `globalListener`\n * to the target if this is the first listener.\n */\nconst addListener = (\n  element: EventTarget,\n  eventType: string,\n  listener: EventListener,\n  options?: AddEventListenerOptions,\n): void => {\n  // get element listeners first\n  if (!registry[eventType]) {\n    registry[eventType] = new Map();\n  }\n  const oneEventMap = registry[eventType];\n\n  if (!oneEventMap.has(element)) {\n    oneEventMap.set(element, new Map());\n  }\n  const oneElementMap = oneEventMap.get(element) as ListenerObject;\n\n  // get listeners size\n  const { size } = oneElementMap;\n\n  // register listener with its options\n  oneElementMap.set(listener, options);\n\n  // add listener last\n  if (!size) {\n    element.addEventListener(eventType, globalListener, options);\n  }\n};\n\n/**\n * Remove a listener from registry and detach the `globalListener`\n * if no listeners are found in the registry.\n *\n */\nconst removeListener = (\n  element: EventTarget,\n  eventType: string,\n  listener: EventListener,\n  options?: AddEventListenerOptions,\n): void => {\n  // get listener first\n  const oneEventMap = registry[eventType];\n  const oneElementMap = oneEventMap && oneEventMap.get(element);\n  const savedOptions = oneElementMap && oneElementMap.get(listener);\n\n  // also recover initial options\n  const eventOptions = savedOptions !== undefined ? savedOptions : options;\n\n  // unsubscribe second, remove from registry\n  if (oneElementMap && oneElementMap.has(listener)) oneElementMap.delete(listener);\n  if (oneEventMap && (!oneElementMap || !oneElementMap.size)) oneEventMap.delete(element);\n  if (!oneEventMap || !oneEventMap.size) delete registry[eventType];\n\n  // remove listener last\n  /* istanbul ignore else */\n  if (!oneElementMap || !oneElementMap.size) {\n    element.removeEventListener(eventType, globalListener, eventOptions);\n  }\n};\n\n// alias main methods\nconst on: typeof addListener = addListener;\nconst off: typeof removeListener = removeListener;\n\nexport { addListener, removeListener, on, off, globalListener, registry };\n"],"names":["registry","globalListener","e","type","currentTarget","element","listenersMap","listener","options","removeListener","addListener","eventType","oneEventMap","oneElementMap","size","savedOptions","eventOptions","on","off"],"mappings":"AAUA,MAAMA,IAA2B,CAAC,GAQ5BC,IAAiB,CAACC,MAAmB;AACnC,QAAA,EAAE,MAAAC,GAAM,eAAAC,EAAkB,IAAAF;AAE/B,GAAA,GAAGF,EAASG,CAAI,CAAC,EAAE,QAAQ,CAAC,CAACE,GAASC,CAAY,MAAM;AAEvD,IAAIF,MAAkBC,KACnB,CAAA,GAAGC,CAAY,EAAE,QAAQ,CAAC,CAACC,GAAUC,CAAO,MAAM;AACjD,MAAAD,EAAS,MAAMF,GAAS,CAACH,CAAC,CAAC,GAEvB,OAAOM,KAAY,YAAYA,EAAQ,QAC1BC,EAAAJ,GAASF,GAAMI,GAAUC,CAAO;AAAA,IACjD,CACD;AAAA,EACH,CACD;AACH,GAMME,IAAc,CAClBL,GACAM,GACAJ,GACAC,MACS;AAEL,EAACR,EAASW,CAAS,MACZX,EAAAW,CAAS,IAAI,oBAAI;AAEtB,QAAAC,IAAcZ,EAASW,CAAS;AAEtC,EAAKC,EAAY,IAAIP,CAAO,KAC1BO,EAAY,IAAIP,GAAa,oBAAA,IAAK,CAAA;AAE9B,QAAAQ,IAAgBD,EAAY,IAAIP,CAAO,GAGvC,EAAE,MAAAS,EAAS,IAAAD;AAGH,EAAAA,EAAA,IAAIN,GAAUC,CAAO,GAG9BM,KACKT,EAAA,iBAAiBM,GAAWV,GAAgBO,CAAO;AAE/D,GAOMC,IAAiB,CACrBJ,GACAM,GACAJ,GACAC,MACS;AAEH,QAAAI,IAAcZ,EAASW,CAAS,GAChCE,IAAgBD,KAAeA,EAAY,IAAIP,CAAO,GACtDU,IAAeF,KAAiBA,EAAc,IAAIN,CAAQ,GAG1DS,IAAeD,MAAiB,SAAYA,IAAeP;AAG7D,EAAAK,KAAiBA,EAAc,IAAIN,CAAQ,KAAGM,EAAc,OAAON,CAAQ,GAC3EK,MAAgB,CAACC,KAAiB,CAACA,EAAc,SAAOD,EAAY,OAAOP,CAAO,IAClF,CAACO,KAAe,CAACA,EAAY,SAAM,OAAOZ,EAASW,CAAS,IAI5D,CAACE,KAAiB,CAACA,EAAc,SAC3BR,EAAA,oBAAoBM,GAAWV,GAAgBe,CAAY;AAEvE,GAGMC,IAAyBP,GACzBQ,IAA6BT;"}