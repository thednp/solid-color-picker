import * as tsup from 'tsup';
import * as esbuild from 'esbuild';

interface EntryOptions {
    name?: string | undefined;
    /** entries with '.tsx' extension will have `solid` export condition generated */
    entry: string;
    /** Setting `true` will generate a development-only entry (default: `false`) */
    dev_entry?: boolean | string;
    /** Setting `true` will generate a server-only entry (default: `false`) */
    server_entry?: boolean | string;
}
type ModifyEsbuildOptions = (modify_esbuild_options: esbuild.BuildOptions, permutation: BuildItem) => esbuild.BuildOptions;
interface PresetOptions {
    entries: EntryOptions | EntryOptions[];
    /** Setting `true` will remove all `console.*` calls and `debugger` statements (default: `false`) */
    drop_console?: boolean | undefined;
    /** Pass options to esbuild */
    modify_esbuild_options?: ModifyEsbuildOptions;
    /** Additional esbuild plugins (solid one is already included) */
    esbuild_plugins?: tsup.Options['esbuildPlugins'];
    /** Setting `true` will generate a CommonJS build alongside ESM (default: `false`) */
    cjs?: boolean | undefined;
}
interface ParsedPresetOptions {
    watching: boolean;
    single_entry: boolean;
    entries: ParsedEntry[];
    index_entry: ParsedEntry;
    out_dir: string;
    cjs: boolean;
    format: tsup.Options['format'];
    drop_console: boolean;
    modify_esbuild_options: ModifyEsbuildOptions;
    esbuild_plugins: esbuild.Plugin[];
}
interface ParsedEntry {
    options: EntryOptions;
    filename: string;
    type: EntryType;
    exports: EntryExportPaths;
    paths: EntryExportPaths;
}
interface EntryExportPaths {
    main: string;
    dev: string;
    server: string;
}
interface EntryType {
    dev: boolean;
    server: boolean;
    jsx: boolean;
}
interface BuildItem {
    entries: Set<ParsedEntry>;
    type: EntryType;
}
declare function parsePresetOptions(preset_options: PresetOptions, watching?: boolean): ParsedPresetOptions;
declare function generateTsupOptions(options: ParsedPresetOptions): tsup.Options[];

declare namespace Package {
    type Browser = Record<string, string | false>;
    type TypeVersions = Record<string, string[]>;
    type ExportConditions = {
        [key: string]: Exports;
    };
    type Exports = null | string | (string | ExportConditions)[] | ExportConditions | undefined;
    interface ExportFields {
        main: string;
        module: string;
        types: string;
        browser: Browser;
        exports: Record<string, ExportConditions> | ExportConditions;
        /**
         *   "typeVersions" are for older versions of ts, but are still needed for some tools
         *   They are only needed if there are multiple entries
         */
        typesVersions: Record<string, TypeVersions>;
    }
}
declare const getImportConditions: (options: ParsedPresetOptions, entry: ParsedEntry, file_type: keyof EntryExportPaths) => Package.ExportConditions;
declare const getConditions: (options: ParsedPresetOptions, entry: ParsedEntry, type: 'server' | 'main') => Package.ExportConditions;
/**
 * Generates the export fields for package.json based on the passed preset {@link options}.
 *
 * Use this to update your package.json with the correct export fields. See {@link writePackageJson} for an example.
 *
 * @param options
 * @returns The export fields for package.json. See {@link Package.ExportFields} for info on the individual fields.
 */
declare function generatePackageExports(options: ParsedPresetOptions): Package.ExportFields;
declare const CWD: string;
declare const DEFAULT_PKG_PATH: string;
/**
 * Writes passed {@link fields} to package.json at {@link filename}.
 *
 * @param fields The fields to write to package.json
 * @param filename Defaults to package.json in the current working directory.
 * @param space See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Parameters} for more info. If not provided, will be inferred from package.json.
 */
declare function writePackageJson(fields: Record<string, any>, filename?: string, space?: string | number): Promise<void>;

export { BuildItem, CWD, DEFAULT_PKG_PATH, EntryExportPaths, EntryOptions, EntryType, ModifyEsbuildOptions, Package, ParsedEntry, ParsedPresetOptions, PresetOptions, generatePackageExports, generateTsupOptions, getConditions, getImportConditions, parsePresetOptions, writePackageJson };
