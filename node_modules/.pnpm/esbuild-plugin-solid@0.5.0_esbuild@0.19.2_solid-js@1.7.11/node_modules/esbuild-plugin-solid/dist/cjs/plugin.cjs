"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/plugin.ts
var plugin_exports = {};
__export(plugin_exports, {
  solidPlugin: () => solidPlugin
});
module.exports = __toCommonJS(plugin_exports);
var import_path = require("path");
var import_promises = require("fs/promises");
var import_core = require("@babel/core");
var import_babel_preset_solid = __toESM(require("babel-preset-solid"), 1);
var import_preset_typescript = __toESM(require("@babel/preset-typescript"), 1);
function solidPlugin(options) {
  return {
    name: "esbuild:solid",
    setup(build) {
      build.onLoad({ filter: /\.(t|j)sx$/ }, async (args) => {
        const source = await (0, import_promises.readFile)(args.path, { encoding: "utf-8" });
        const { name, ext } = (0, import_path.parse)(args.path);
        const filename = name + ext;
        const result = await (0, import_core.transformAsync)(source, {
          presets: [[import_babel_preset_solid.default, options?.solid ?? {}], [import_preset_typescript.default, options?.typescript ?? {}]],
          filename,
          sourceMaps: "inline",
          ...options?.babel ?? {}
        });
        if (result?.code === void 0 || result.code === null) {
          throw new Error("No result was provided from Babel");
        }
        return { contents: result.code, loader: "js" };
      });
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  solidPlugin
});
//# sourceMappingURL=plugin.cjs.map
